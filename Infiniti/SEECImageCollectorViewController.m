/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
 
 */ 



#import "SEECImageCollectorViewController.h"


#import "SEECUser.h"
#import "AFJSONUtilities.h"
#import "NSData+Persistence.h"
#import "UIViewController+Camera.h"
#import "UIImage+Persistence.h"
#import "SEECApplyEvaluationViewController.h"
#import "NSArray+Persistence.h"
#import "SEECPhotoGallerySource.h"
#import "AFNetworking.h"


@interface SEECImageCollectorViewController ()

@end


@implementation SEECImageCollectorViewController

@synthesize sample1;
@synthesize sample2;
@synthesize sample3;
@synthesize scrollImage;
@synthesize Trash1Button;
@synthesize Trash2Button;
@synthesize Trash3Button;


UIScrollView *scroll;
NSMutableArray * array ;


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}




- (void)loadView {
    
    [super loadView];
    self.view.backgroundColor = [UIColor redColor];
    array = [[NSMutableArray alloc] initWithCapacity:3];
    //custom config
    scroll = [[UIScrollView alloc] initWithFrame:CGRectMake(40, 44, 700, 1200)];
    scroll.pagingEnabled = YES;
    NSMutableArray *target = [self getSamplesEvidences];
    //NSLog(@"tenemos numero de fotos %d ", [target count]);
    NSInteger numberOfViews = [target count]; //test 3
    
    for (int i = 0; i < numberOfViews; i++) {
        
        CGFloat xOrigin = i * self.view.frame.size.width;
        
        //recover info
        NSDictionary *foto = [target objectAtIndex:i];
        
        //converter image
        NSString *fileName = [NSString stringWithFormat:@"%@", [foto valueForKey:@"fileName"]];
        
        //colections of samples
       [array addObject:fileName];
        
        
        //building ui img
        UIImageView *imageView = [[UIImageView alloc] initWithImage:[UIImage imageFromFileName:fileName]];
        //the views
        UIView *awesomeView = [[UIView alloc] initWithFrame:CGRectMake(xOrigin, 0, self.view.frame.size.width, self.view.frame.size.height)];
        

        //awesomeView.backgroundColor = [UIColor colorWithRed:0.5/i green:0.5 blue:0.5 alpha:1];
        
        awesomeView.backgroundColor = [UIColor blackColor];
        
        
        [awesomeView addSubview:imageView ];
        
        [awesomeView sendSubviewToBack:imageView ];
        
        [scroll addSubview:awesomeView];
        
        [awesomeView release];
    }
    
    scroll.contentSize = CGSizeMake(self.view.frame.size.width * numberOfViews, self.view.frame.size.height);
    
    [self.view addSubview:scroll];
    
    [scroll release];
}




- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}


- (IBAction)backScreen:(id)sender{

    
    [self dismissModalViewControllerAnimated:YES];

    

}



-(NSMutableArray * )getSamplesEvidences{
    
    //get all samples
    NSArray *allEvidence = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    
    //set log samples
   // NSLog(@"array of evideneces %@", allEvidence);
    
    //create a query
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@" branchID == %@ AND phase == %@   AND activityId == %@",[[SEECUser sharedInstance]branchId], [[SEECUser sharedInstance]phaseNum], [[SEECUser sharedInstance]FK_activityId]];
    
    //filtering
    NSArray *samples = [allEvidence filteredArrayUsingPredicate:predicate];
    
    //filtres to log
   // NSLog(@"array of samples %@", samples);
    
    //prepare to string
    NSMutableArray *mutableArray = [samples mutableCopy];
    
    //return mutable
    return mutableArray;
}







//main trash but

- (IBAction)Trash3Action:(id)sender{

    
    NSLog(@"Trash sample photo");
    CGFloat pageWidth = scroll.frame.size.width;
    int page = floor((scroll.contentOffset.x - pageWidth / 2) / pageWidth) + 1;
    NSLog(@"index at page numer =  %d", page);
    
    
    if(page == 0){
        [[NSNotificationCenter defaultCenter] postNotificationName:@"Gallery" object:@"1"];
        NSLog(@"fileName1 ->%@", (NSString *) [array objectAtIndex:page]);
        [ self deleteJsonEvidense:(NSString *) [array objectAtIndex:page]];
        
    }
    
    
    
    if(page == 1){
        [[NSNotificationCenter defaultCenter] postNotificationName:@"Gallery" object:@"2"];
        NSLog(@"fileName2 ->%@", (NSString *) [array objectAtIndex:page]);
        [ self deleteJsonEvidense:(NSString *) [array objectAtIndex:page]];
        
    }
    
    
    if(page == 2){
       [[NSNotificationCenter defaultCenter] postNotificationName:@"Gallery" object:@"3"];
        NSLog(@"fileName3 ->%@", (NSString *) [array objectAtIndex:page]);
        [ self deleteJsonEvidense:(NSString *) [array objectAtIndex:page]];
    }
    
    
    [self dismissModalViewControllerAnimated:YES];

    
}



///
-(void) deleteJsonEvidense: (  NSString *) FileName {
        
    
    //get all samples
    NSArray *response = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    
    //NSError *error = nil;
    
    //NSLog(@" samples ........%@", response);
    
    NSMutableArray *targetArray = [NSMutableArray array];
    
    NSMutableArray *newArray = [NSMutableArray array];
    
    if (response != nil)    // Previous captures exist
    {
     
        
        [targetArray addObjectsFromArray:response];
        
        NSLog(@"FILE ->%@", FileName);
        
        for (int i=0; i<[targetArray count]; ++i)
        {
            
            NSDictionary *foto = [response objectAtIndex:i];
            
            
            if ([[foto valueForKey:@"fileName"] isEqualToString:FileName])
            {
                //remove item
                 NSLog(@" ERASE ");
                //[targetArray removeObject: i];
                
            }else{
            
                [newArray addObject:foto];
                
            }
        
        }
        
        //NSLog(@"Update removed file on  json %@",newArray);
        
        [newArray saveArrayWithFileName:@"seec_evidenceFile.json"];
        
        
    }
    
}





- (void)touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
      
    NSLog(@"Touch began");
    CGFloat pageWidth = scroll.frame.size.width;
    int page = floor((scroll.contentOffset.x - pageWidth / 2) / pageWidth) + 1;
    NSLog(@"Touch began %d", page);
  
}





- (void)dealloc {
     [super dealloc];
}


@end
