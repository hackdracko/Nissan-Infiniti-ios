/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
 
 */ 


#import "SEECApplyEvaluationViewController.h"
#import "SEECNSSWViewController.h"
#import "SEECNSSWViewController.h"
#import "SEECUser.h"
#import "AFJSONUtilities.h"
#import "NSData+Persistence.h"
#import "UIViewController+Camera.h"
#import "UIImage+Persistence.h"
#import "JSONKit.h"

@interface SEECApplyEvaluationViewController ()

@end

@implementation SEECApplyEvaluationViewController
@synthesize flagEvaluation;
@synthesize commentTitle;
@synthesize comment;



BOOL update;

NSString *jsonFileName= @"f4_seec_evaluation";

int countEvaluation;

NSDictionary *currentObjectEvaluation;


- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}




- (void)viewDidLoad
{
    
	

    
    [super viewDidLoad];
    
    //by deaful no, until user select some activity
    update = NO;
    
    [flagEvaluation setHidden:YES];
    
    //display info on screen
    [self recoverEvaluation];
    
    
    
    
    
}

- (void)viewDidUnload
{
    [self setFlagEvaluation:nil];
    [self setCommentTitle:nil];
    [self setComment:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
}


- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationLandscapeRight);
}





- (IBAction)back:(id)sender {
    
    [self dismissModalViewControllerAnimated:YES];

}

/////////     save evaluation




-(void) saveEvaluation{
    
    
    // Load previous array of captures
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName];
    
    if (previousEvaluationData == nil) {
        
        countEvaluation=0;  //first time
        
        [[SEECUser sharedInstance ]initLK_evaluationId:[NSString stringWithFormat:@"%d", countEvaluation]];
        
        //diccionary here
        
        NSLog(@"El archivo no existe!, por que es la primera vez!, agregamos primer registro");
        
        NSError *error = nil;
        
        NSMutableArray *targetArray = [NSMutableArray array];
        
        [targetArray addObject:[self getDictionary]];
        
        NSData *newMetadata = AFJSONEncode(targetArray, &error);    // Encode this as JSON
        
        [newMetadata saveDataWithFileName:jsonFileName];  // Save it using our persistence layer
        
        
    }else{
        
        countEvaluation++;
        
        [[SEECUser sharedInstance ]initLK_evaluationId:[NSString stringWithFormat:@"%d", countEvaluation]];
        
        NSLog(@"El archivo si existe!, agregamos registros!");
        
        NSError *error = nil;
        
        NSMutableArray *targetArray = [NSMutableArray array];
        
        
        //NSLog(@" previus data from file seec evaluation %@", previousEvaluationData);
        
        NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        
        //NSLog(@" ........%@", response);
        
        
        if (response != nil)    // Previous captures exist
        {
            [targetArray addObjectsFromArray:response];
        }
        
        
        [targetArray addObject:[self getDictionary]];
        
        
        
        NSData *newMetadata = AFJSONEncode(targetArray, &error);    // Encode this as JSON
        
        [newMetadata saveDataWithFileName:jsonFileName];  // Save it using our persistence layer
        
        
    }
    
    [self showAlertMsg:@"Actividad salvada"];
    
    
}




////////////  update




-(void) updateEvaluation
{
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName];
    
    NSError *error = nil;
    
    NSArray *response = AFJSONDecode(previousEvaluationData, &error);
    
    //NSLog(@" ........%@", response);
    
    NSMutableArray *targetArray = [NSMutableArray array];
    
    if (response != nil)    // Previous captures exist
    {
        
        [targetArray addObjectsFromArray:response];
        
        NSDictionary *thisEvaluation = [self getDictionary];
        
        for (int i=0; i<[targetArray count]; ++i)
        {
            NSDictionary *anEvaluation = [response objectAtIndex:i];
            
            if ([[anEvaluation valueForKey:@"fK_branchId"] isEqualToString:[thisEvaluation valueForKey:@"fK_branchId"]] &&
                [[anEvaluation valueForKey:@"fK_activityId"] isEqualToString:[thisEvaluation valueForKey:@"fK_activityId"]]
                )
            {
                [targetArray replaceObjectAtIndex:i withObject:thisEvaluation];
            }
        }
        
        //        [targetArray addObject:];
        
        
        
        NSData *newMetadata = AFJSONEncode(targetArray, &error);    // Encode this as JSON
        
        [newMetadata saveDataWithFileName:jsonFileName];  // Save it using our persistence layer
        
        NSLog(@"Update json %@",targetArray);
        
        [self showAlertMsg:@"Actualizado!"];
        
        
    }
}



///////   getDictionary




-(NSDictionary *) getDictionary{
    
    
    
    
    NSArray *valuesForNewCapture = [NSArray arrayWithObjects:
                                    [[SEECUser sharedInstance]LK_evaluationId],
                                    [[SEECUser sharedInstance]FK_userId],
                                    [[SEECUser sharedInstance]FK_manualId],
                                    [[SEECUser sharedInstance]FK_standardId],
                                    [[SEECUser sharedInstance]FK_activityId],
                                    [[SEECUser sharedInstance]FK_branchId],
                                    [[SEECUser sharedInstance]FK_departmentId],
                                    [[SEECUser sharedInstance]FK_ownerId],
                                    [[SEECUser sharedInstance]phaseNum],
                                    [[SEECUser sharedInstance]reached],
                                    [[SEECUser sharedInstance]notReached],
                                    [[SEECUser sharedInstance]notApplicable],
                                    [[SEECUser sharedInstance]certificationLevel],
                                    [[SEECUser sharedInstance]commentTitle],
                                    [[SEECUser sharedInstance]comment],
                                    [[SEECUser sharedInstance]recommendation],
                                    [[SEECUser sharedInstance]createdDate],
                                    [[SEECUser sharedInstance]actionPlan],
                                    [[SEECUser sharedInstance]estimatedImpDate],
                                    [[SEECUser sharedInstance]actionPlanDate],
                                    [[SEECUser sharedInstance]actionPlanComment],
                                    [[SEECUser sharedInstance]commentDate],
                                    [[SEECUser sharedInstance]actionPlanApprove],
                                    [[SEECUser sharedInstance]furtherContribution],
                                    [[SEECUser sharedInstance]tracking],
                                    @"0",
                                    nil];
    
    
    
    
    NSArray *keysForNewCapture = [NSArray arrayWithObjects:
                                  @"lK_evaluationId",
                                  @"fK_userId",
                                  @"fK_manualId",
                                  @"fK_standardId",
                                  @"fK_activityId",
                                  @"fK_branchId",
                                  @"fK_departmentId",
                                  @"fK_ownerId",
                                  @"phaseNum",
                                  @"reached",
                                  @"notReached",
                                  @"notApplicable",
                                  @"certificationLevel",
                                  @"commentTitle",
                                  @"comment",
                                  @"recommendation",
                                  @"createdDate",
                                  @"actionPlan",
                                  @"estimatedImpDate",
                                  @"actionPlanDate",
                                  @"actionPlanComment",
                                  @"commentDate",
                                  @"actionPlanApprove",
                                  @"furtherContribution",
                                  @"tracking",
                                  @"specialStandard",
                                  nil];
    
    
    
    // NSLog(@" %@",valuesForNewCapture);
    // NSLog(@" %@",keysForNewCapture);
    
    
    NSDictionary *dictionaryForNewCapture = [NSDictionary dictionaryWithObjects:valuesForNewCapture
                                                                        forKeys:keysForNewCapture];
    
    return dictionaryForNewCapture;
    
    
}


-(void) logEvaluation{
    
    NSLog(@" ====================================================");
    NSLog(@" LK_evaluationId =  %@",  [[SEECUser sharedInstance]LK_evaluationId]);
    NSLog(@" FK_userId  = %@",    [[SEECUser sharedInstance]FK_userId]);
    NSLog(@" FK_manualId = %@",    [[SEECUser sharedInstance]FK_manualId]);
    NSLog(@" FK_standardId = %@",   [[SEECUser sharedInstance]FK_standardId]);
    NSLog(@" FK_activityId = %@",   [[SEECUser sharedInstance]FK_activityId]);
    NSLog(@" FK_branchId = %@",  [[SEECUser sharedInstance]FK_branchId]);
    NSLog(@" FK_departmentId = %@",  [[SEECUser sharedInstance]FK_departmentId]);
    NSLog(@" FK_ownerId = %@",  [[SEECUser sharedInstance]FK_ownerId]);
    NSLog(@" phaseNum = %@",  [[SEECUser sharedInstance]phaseNum]);
    NSLog(@" reached = %@",  [[SEECUser sharedInstance]reached]);
    NSLog(@" notReached = %@", [[SEECUser sharedInstance]notReached]);
    NSLog(@" notApplicable = %@", [[SEECUser sharedInstance]notApplicable]);
    NSLog(@" certificationLevel = %@", [[SEECUser sharedInstance]certificationLevel]);
    NSLog(@" commentTitle = %@", [[SEECUser sharedInstance]commentTitle]);
    NSLog(@" comment = %@", [[SEECUser sharedInstance]comment]);
    NSLog(@" recommendation - %@", [[SEECUser sharedInstance]recommendation]);
    NSLog(@" createdDate = %@", [[SEECUser sharedInstance]createdDate]);
    NSLog(@" actionPlan - %@", [[SEECUser sharedInstance]actionPlan]);
    NSLog(@" estimatedImpDate - %@", [[SEECUser sharedInstance]estimatedImpDate]);
    NSLog(@" actionPlanDate - %@", [[SEECUser sharedInstance]actionPlanDate]);
    NSLog(@" actionPlanComment - %@", [[SEECUser sharedInstance]actionPlanComment]);
    NSLog(@" commentDate - %@", [[SEECUser sharedInstance]commentDate]);
    NSLog(@" actionPlanApprove - %@", [[SEECUser sharedInstance]actionPlanApprove]);
    NSLog(@" furtherContribution - %@", [[SEECUser sharedInstance]furtherContribution]);
    NSLog(@" tracking  - %@", [[SEECUser sharedInstance]tracking]);
    NSLog(@" specialStandard = %@", [[SEECUser sharedInstance]specialStandard]);
    NSLog(@" ====================================================");
    
}





//////////


-(void)recoverEvaluation{
    
    
    
    // Load previous array of captures
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName];
    
    //NSLog(@" response of data %@", previousEvaluationData);
    
    if (previousEvaluationData!=nil) {
        
        
        //NSError *error = nil;
        
        
        NSMutableArray *response = [previousEvaluationData objectFromJSONData];
        
        
        NSLog(@" response =>  %@", response);
        
        countEvaluation = [response count];
        
        NSLog(@" Numero de evaluaciones registradas = %d", countEvaluation );
        
        NSLog(@" recover branch ID  = %@", [[SEECUser sharedInstance]FK_branchId]);
        NSLog(@" recover activity ID = %@",[[SEECUser sharedInstance]FK_activityId]);
        NSLog(@" recover phase num = %@",[[SEECUser sharedInstance]phaseNum]);
        
        // for testing Review FK or fK
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@"(%K = %@) AND (%K = %@) AND (%K = %@)",
                                  @"fK_branchId", [[SEECUser sharedInstance] FK_branchId],
                                  @"fK_activityId", [[SEECUser sharedInstance] FK_activityId],
                                  @"phaseNum", [[SEECUser sharedInstance] phaseNum] ];
        
        NSArray *leads = [response filteredArrayUsingPredicate:predicate];
        
        
        
        NSLog(@"Filtred response:  fk_branchId AND fk_activityId AND phaseNum  ----------  : %@", leads);
        
        
        
        
        if( [leads count] > 0 ){
            
            currentObjectEvaluation = [ leads objectAtIndex:0];
            
            NSString *title = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"commentTitle"]];
            
            NSLog(@"TITLE UPDATE  ----------  : %@",title);
            
            NSString *commentin = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"comment"]];
            
            NSLog(@"comment UPDATE  ----------  : %@",commentin);
            
            NSString *notReached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notReached"]];
            
            NSString *notApp = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notApplicable"]];
            
            NSString *reached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"reached"]];
            
            
            
            NSLog(@" notReached  %@", notReached);
            
            NSLog(@" notApp  %@", notApp);
            
            NSLog(@" reached  %@", reached);
            
            update = YES;
            
            
            
            if( [notReached isEqualToString:@"1"] &&
               [reached isEqualToString:@"0"]){
                
                [flagEvaluation setHidden:NO];
                [flagEvaluation setImage:[UIImage imageNamed: @"red.png"]];
                
            }
            
            //json issue arrived  notApp <null>
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"0"]) {
                [flagEvaluation setHidden:NO];
                [flagEvaluation setImage:[UIImage imageNamed: @"yellow.png"]];
            }
            
            
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"1"]){
                [flagEvaluation setHidden:NO];
                [flagEvaluation setImage:[UIImage imageNamed: @"green.png"]];
            }
            
            
      
            
            
            
            commentTitle.text=title;
            comment.text=commentin;
            
            
        }else{
            
            [flagEvaluation setHidden:YES];
            update = NO;
        }
        
        
        
    }//first time if
    
}



/////


-(NSDictionary *) recoverInfo: (NSString *)    fileJson
                             : (NSPredicate *) predicate
                             : (NSString *)    dataRoot
                             : (NSString *) setValue{
    
    NSURL *url = [[NSBundle mainBundle] URLForResource:fileJson withExtension:@"json"];
    
    NSData *data = [NSData dataWithContentsOfURL:url];
    
    NSError *error = nil;
    
    NSDictionary *response = AFJSONDecode(data, &error);
    
    
    NSArray *items =[[[response valueForKey:dataRoot] valueForKey:setValue] filteredArrayUsingPredicate:predicate];
    
    
    NSDictionary *currentObject = [ items objectAtIndex:0];
    
    
    return currentObject;
    
}



//////// aplica

- (IBAction)reached:(UIButton *)sender {
    
    
    NSLog(@"cumple");
    
    
    if( [[[SEECUser sharedInstance]FK_activityId] isEqualToString:@""] ){
        
        [self showAlertMsg:@"Selecciona una Actividad!!!"];
        
    }else{
        
        
        [[SEECUser sharedInstance]initreached:@"1"];
        [[SEECUser sharedInstance]initnotReached:@"0"];
        [[SEECUser sharedInstance]initnotApplicable:@"0"];
        
        [[SEECUser sharedInstance]initcommentTitle:commentTitle.text];
        [[SEECUser sharedInstance]initcomment:comment.text];
        
        
        
        
        if(update==NO){
            //[self logEvaluation];
            [self saveEvaluation];
        }
        
        
        if(update ==YES){
            NSLog(@"update");
            [self updateEvaluation];
            
        }
        
        
        [flagEvaluation setHidden:NO];
        [flagEvaluation setImage:[UIImage imageNamed: @"green.png"]];
        update = YES;
        
    }

    
    
     NSString *flagNotification = @"reached";
     [[NSNotificationCenter defaultCenter] postNotificationName:@"done" object:flagNotification];
    
    
}








- (IBAction)notApplicable:(UIButton *)sender {
    
    
    
    NSLog(@"no aplica");
    
    if([[[SEECUser sharedInstance]FK_activityId] isEqualToString:@""] ||
       [commentTitle.text isEqualToString:@""] ||
       [comment.text isEqualToString:@""]    ){
        
        [self showAlertMsg:@"Inserta titulo y comentario "];
        
    }else{
        
        [[SEECUser sharedInstance]initreached:@"0"];
        [[SEECUser sharedInstance]initnotReached:@"0"];
        [[SEECUser sharedInstance]initnotApplicable:@"1"];
        
        [[SEECUser sharedInstance]initcommentTitle:commentTitle.text];
        [[SEECUser sharedInstance]initcomment:comment.text];
        
        
        if(update==NO){
          
            
            //[self logEvaluation];
            [self saveEvaluation];
      
        }
        
        
        if(update ==YES){
            NSLog(@"update");
            
            [self updateEvaluation];
            
            
        }
        
        [flagEvaluation setHidden:NO];
        [flagEvaluation setImage:[UIImage imageNamed: @"yellow.png"]];
        update = YES;
        
    }
    
    
    NSString *flagNotification = @"notApplicable";
    [[NSNotificationCenter defaultCenter] postNotificationName:@"done" object:flagNotification];
    
    
}





- (IBAction)notReached:(UIButton *)sender {
    
    
    if([[[SEECUser sharedInstance]FK_activityId] isEqualToString:@""] ||
       [commentTitle.text isEqualToString:@""] ||
       [comment.text isEqualToString:@""]    ){
        
        [self showAlertMsg:@"Inserta titulo y comentario "];
        
    }else{
        
        [[SEECUser sharedInstance]initreached:@"0"];
        [[SEECUser sharedInstance]initnotReached:@"1"];
        [[SEECUser sharedInstance]initnotApplicable:@"0"];
        
        NSLog(@"no cumple");
        
        [[SEECUser sharedInstance]initcommentTitle:commentTitle.text];
        [[SEECUser sharedInstance]initcomment:comment.text];
        
        if(update==NO){
            //[self logEvaluation];
            [self saveEvaluation];
        }
        
        
        if(update ==YES){
            NSLog(@"update");
            [self updateEvaluation];
            
        }
        
        [flagEvaluation setHidden:NO];
        [flagEvaluation setImage:[UIImage imageNamed: @"red.png"]];
        update = YES;
        
        
    }

    
    NSString *flagNotification = @"notReached";
    [[NSNotificationCenter defaultCenter] postNotificationName:@"done" object:flagNotification];
    
    
}



-(void)showAlertMsg:(NSString *)msgtext{
    
	NSString *title = @"SEEC iPad";
	
    UIAlertView* alertView = nil;
    
    alertView = [[UIAlertView alloc] initWithTitle:title message:msgtext delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alertView show];
    
    [alertView release];
}




-(void)cleanVariables{
    
    [[SEECUser sharedInstance]initFK_activityId:@""];
    [[SEECUser sharedInstance]initcomment:@""];
    [[SEECUser sharedInstance]initcommentTitle:@""];
    
    [[SEECUser sharedInstance]initreached:@""];
    [[SEECUser sharedInstance]initnotReached:@""];
    [[SEECUser sharedInstance]initnotApplicable:@""];
    
}



-(void) cleanForm{
    
    commentTitle.text=@"";
    comment.text=@"";
    [flagEvaluation setHidden:YES];
    
}




- (void)dealloc {
    [flagEvaluation release];
    [commentTitle release];
    [comment release];
    [super dealloc];
}




@end
