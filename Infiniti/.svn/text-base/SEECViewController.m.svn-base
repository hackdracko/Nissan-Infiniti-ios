/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
 
 */ 


#import "SEECViewController.h"
#import "AFJSONUtilities.h"
#import "SEECUser.h"
#import "SEECEvaluationViewController.h"
#import "NSData+Persistence.h"



@interface SEECViewController ()
@end


NSString *jsonFileName4 = @"f4_seec_evaluation";
NSDictionary *currentObjectEvaluation;
NSString* theOld;
NSDictionary *responseStd;
NSMutableArray *arrayout;


@implementation SEECViewController



- (id)initWithStyle:(UITableViewStyle)style
{
    self = [super initWithStyle:style];
    self.title =@"Actividad";
    self.contentSizeForViewInPopover = CGSizeMake(425.0, 650.0);
    if (self) {
    }
    return self; 
}




- (void)viewDidLoad
{
    [super viewDidLoad];
    
    arrayout = [[NSMutableArray alloc] init];
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_standard" withExtension:@"json"];
    NSData *std = [NSData dataWithContentsOfURL:url];
    NSError *error = nil;
    NSDictionary *response = AFJSONDecode(std, &error);
    NSPredicate *predicate;
    if([[[SEECUser sharedInstance]certificationLevel ] isEqualToString:@"Oro"]){
        predicate = [NSPredicate predicateWithFormat:@" phaseNum == %@  AND standardCode.length > 2 AND FK_manualId ==  %@",self.phaseNum, self.manualId ];
    }
    if([[[SEECUser sharedInstance]certificationLevel ] isEqualToString:@"Plata"]){
        predicate = [NSPredicate predicateWithFormat:@" phaseNum == %@  AND standardCode.length <= 2 AND FK_manualId ==  %@",self.phaseNum, self.manualId ];
    }

    NSArray *selectedStd =[[[response valueForKey:@"dataroot"] valueForKey:@"seec_standard"] filteredArrayUsingPredicate:predicate];
    _arForTable = [[NSMutableArray alloc] initWithArray:selectedStd];
   
}



- (void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}

- (void)viewDidAppear:(BOOL)animated
{
    [super viewDidAppear:animated];
}

- (void)viewWillDisappear:(BOOL)animated
{
	[super viewWillDisappear:animated];
}

- (void)viewDidDisappear:(BOOL)animated
{
	[super viewDidDisappear:animated];
}


- (void)viewDidUnload
{
    [super viewDidUnload];
    
}



- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}



#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}



- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    return [self.arForTable count];
    
}




- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    if (cell == nil) {
        cell = [[[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier] autorelease];
    }
    cell.imageView.image = [ self recoverEvaluationFlags: [[self.arForTable objectAtIndex:indexPath.row] valueForKey:@"LK_activityId"] ];
   
    NSString *standardCode= [[self.arForTable objectAtIndex:indexPath.row] valueForKey:@"standardCode"];
    
    if([standardCode length] ==0){
    
        cell.textLabel.text= [[self.arForTable objectAtIndex:indexPath.row] valueForKey:@"standardName"]  ;
    
        
    }else{
        NSString *spc = @".- ";
        cell.textLabel.text= [[standardCode stringByAppendingString:spc ]stringByAppendingString:[[self.arForTable objectAtIndex:indexPath.row] valueForKey:@"standardName"]]  ;
        
    
    }
    
    
    [cell setIndentationLevel:1];
    return cell;
}




- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    if ( [cell.textLabel.text hasPrefix:@"NSSW"] ||
        [cell.textLabel.text hasPrefix:@"NSOS"] ||
        [cell.textLabel.text hasPrefix:@"AS-DOS"] ||
        [cell.textLabel.text hasPrefix:@"NSGP"] ||
        [cell.textLabel.text hasPrefix:@"NREDI"] ||
        [cell.textLabel.text hasPrefix:@"NMOS"] ||
        [cell.textLabel.text hasPrefix:@"B&P"] ||
        [cell.textLabel.text hasPrefix:@"NAOS"] ||
        [cell.textLabel.text hasPrefix:@"NSRC"]) {
        
        
    }else{
        
        [cell setBackgroundColor: [UIColor colorWithRed:225.0f/255.0f green:225.0f/255.0f blue:225.0f/255.0f alpha:1.0f]  ];
        
    }
    
    
}



- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
	NSDictionary *d=[_arForTable objectAtIndex:indexPath.row];

    if([d valueForKey:@"LK_standardId"]) {
        
        NSString *stn = [d valueForKey:@"standardName"];

        [[SEECUser sharedInstance] initStd:stn];

        NSArray *ar = [self recoverActivity:[d valueForKey:@"LK_standardId"]];
      	BOOL isAlreadyInserted=NO;
        isAlreadyInserted = [self addingPlate:[d valueForKey:@"LK_standardId"] ];
        if(isAlreadyInserted)
        {
            
            NSMutableArray *indexesToHide = [NSMutableArray array];
            
            for (NSUInteger standardsIndex = [ar count]; standardsIndex > 0; --standardsIndex)
            {
                NSUInteger indexForStandard = indexPath.row + standardsIndex;
                
                NSIndexPath *indexPathForStandard = [NSIndexPath indexPathForRow:indexForStandard
                                                                       inSection:0];
                [indexesToHide addObject:indexPathForStandard];
                [self.arForTable removeObjectAtIndex:indexForStandard];
            }
            
            [tableView deleteRowsAtIndexPaths:indexesToHide withRowAnimation:UITableViewRowAnimationRight];
            
      	}
        else
        {
 
    		NSUInteger count=indexPath.row+1;
            NSLog(@"count value : %d",count);
    		NSMutableArray *arCells=[NSMutableArray array];
            for(NSDictionary *dInner in ar ) {

                [arCells addObject:[NSIndexPath indexPathForRow:count inSection:0]];
   
                NSDictionary *dInner1 = [self addObjectPlate:dInner];
                [self.arForTable insertObject:dInner1 atIndex:count];
                ++count;
	        }
            [[self tableView] beginUpdates];
    		[tableView insertRowsAtIndexPaths:arCells withRowAnimation:UITableViewRowAnimationLeft];
            [[self tableView] endUpdates];
	    }
    }else{
        NSDictionary *d=[_arForTable objectAtIndex:indexPath.row];

        NSArray *narray = [self recoverTheActivity:[d valueForKey:@"LK_activityId"]];
        NSDictionary *currentObject = [  narray  objectAtIndex:0];

        [[SEECUser sharedInstance] initObj:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"objective"]]];
        [[SEECUser sharedInstance] initMth:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"method"]]];
        [[SEECUser sharedInstance] initAct:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"activityDesc"]]];
        [[SEECUser sharedInstance] initCode:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"code"]]];
        [[SEECUser sharedInstance] initEvid:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"evidence"]]];
        
        [[SEECUser sharedInstance] inittypeOfBreach:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"typeOfBreach"]]];
        
        
  
        [[SEECUser sharedInstance ]initFK_activityId:[currentObject valueForKey:@"LK_activityId"]];
        [[SEECUser sharedInstance ]initFK_departmentId:[currentObject valueForKey:@"FK_departmentId"]];
        [[SEECUser sharedInstance ]initspecialStandard:[currentObject valueForKey:@"specialStandard"]];
        [[SEECUser sharedInstance ]initFK_standardId:[currentObject valueForKey:@"FK_standardId"]];
        NSArray *objKeys = [NSArray arrayWithObjects: @"label", @"id",  nil];
        NSArray *branchObjects = [NSArray arrayWithObjects:[currentObject valueForKey:@"activityDesc"], [currentObject valueForKey:@"LK_activityId"], nil];
        NSDictionary *branchDictionary = [NSDictionary dictionaryWithObjects:branchObjects forKeys:objKeys];
        [[NSNotificationCenter defaultCenter] postNotificationName:@"manual" object:branchDictionary];
    }
    
}




-(NSDictionary *) addObjectPlate: (NSDictionary *) origen{

    NSString  *code = [origen valueForKey:@"code"];
    NSString  *activityId = [origen valueForKey:@"LK_activityId"];

    NSArray *valueArray = [NSArray arrayWithObjects: code , activityId ,    nil];
    
    NSArray *keyArray = [NSArray arrayWithObjects:@"standardName", @"LK_activityId", nil];
    
    NSDictionary *currentDictionary = [NSDictionary dictionaryWithObjects:valueArray
                                                                  forKeys:keyArray];

    return currentDictionary;
}




-(BOOL) addingPlate: (NSString *) uid{
    BOOL returnValue = NO;
    NSUInteger foundIndex = NSNotFound;
    
    for(int i=0; i < [arrayout count]; ++i) {
        if( [uid isEqualToString:[ arrayout objectAtIndex:i] ]){
            returnValue = YES;
            foundIndex = i;
            break;
        }
    }
    if (!returnValue) {
        [arrayout insertObject:uid atIndex:[arrayout count]];  
        
    }
    else
    {
        [arrayout removeObjectAtIndex:foundIndex];
    }
    
    return returnValue;
}



- ( NSArray *)recoverActivity: (NSString * ) FK_standardId
{
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_activity" withExtension:@"json"];
    NSData *dta = [NSData dataWithContentsOfURL:url];
    NSError *error = nil;
    NSDictionary *resp = AFJSONDecode(dta, &error);
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"FK_standardId ==  %@ AND certificationLevel == %@", FK_standardId, [[SEECUser sharedInstance]certificationLevel] ];
    NSArray *actsled = [[[resp valueForKey:@"dataroot"] valueForKey:@"seec_activity"] filteredArrayUsingPredicate:predicate];
    return actsled;
}




- ( NSArray *)recoverTheActivity: (NSString * ) LK_activityId
{
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_activity" withExtension:@"json"];
    NSData *dta = [NSData dataWithContentsOfURL:url];
    NSError *error = nil;
    NSDictionary *resp = AFJSONDecode(dta, &error);
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"LK_activityId ==  %@ ", LK_activityId ];
    NSArray *actsled = [[[resp valueForKey:@"dataroot"] valueForKey:@"seec_activity"] filteredArrayUsingPredicate:predicate];
    
    return actsled;
}






- (UIImage *) recoverEvaluationFlags: (NSString *) activityId {
    
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName4];
    if (previousEvaluationData!=nil) {
        NSError *error = nil;
        NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@" fK_branchId == %@ AND fK_activityId ==%@ AND  phaseNum ==%@", [[SEECUser sharedInstance]FK_branchId], activityId , [[SEECUser sharedInstance]phaseNum] ];
        
        NSArray *leads = [response filteredArrayUsingPredicate:predicate];
        if( [leads count] > 0 ){
            currentObjectEvaluation = [ leads objectAtIndex:0];
            NSString *notReached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notReached"]];
            NSString *notApp = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notApplicable"]];
            NSString *reached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"reached"]];
            
            if( [notReached isEqualToString:@"1"] &&
               [reached isEqualToString:@"0"]){
                return [UIImage imageNamed: @"noReached.png"];
            }
            
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"0"]) {
                return [UIImage imageNamed: @"notApplied.png"];
            }
            
            
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"1"]){
                return [UIImage imageNamed: @"applied.png"];
            }
            
        }else{
        }
    }
    
    return [UIImage imageNamed: @"noEvaluation.png"];
    
}




-(NSDictionary *) recoverStandart : (NSString * ) LK_standardId{
    NSPredicate *predicate;
    predicate = [NSPredicate predicateWithFormat:@" LK_standardId == %@", LK_standardId ];
    NSLog(@"standard id: %@", LK_standardId);
    NSArray *selectedStd =[[[responseStd valueForKey:@"dataroot"] valueForKey:@"seec_standard"] filteredArrayUsingPredicate:predicate];
    NSDictionary *currentObject =nil;
    if( [selectedStd count] > 0 ){
        currentObject = [ selectedStd objectAtIndex:0];
    }
    return currentObject;
}




-(void) loadStd{
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_standard" withExtension:@"json"];
    NSData *std = [NSData dataWithContentsOfURL:url];
    NSError *error = nil;
    responseStd = AFJSONDecode(std, &error);
}



@end
