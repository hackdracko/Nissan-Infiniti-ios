/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
 
 */ 


#import "SEECSearchByPhaseViewController.h"
#import "SEECUser.h"
#import "AFJSONUtilities.h"
#import "NSData+Persistence.h"



@interface SEECSearchByPhaseViewController ()
@end

@implementation SEECSearchByPhaseViewController


@synthesize allEvaluation;
@synthesize phase;
@synthesize selectedBranches;


NSDictionary *currentObject;




UITableViewCell *cell;

- (id)initWithStyle:(UITableViewStyle)style
{
    
    //to unable scroll
    self.tableView.scrollEnabled = YES;
    
    
    //adjust in popover
    self.contentSizeForViewInPopover = CGSizeMake(400.0, 400.0);
    
    
    self.title = @"Distribuidores en iPad";
    
    self = [super initWithStyle:style];
    if (self) {
        // Custom initialization
    }
    return self;
    
}





- (void)viewDidLoad
{
    
    
    [super viewDidLoad];
    
    // Load previous array of captures
    NSData *previousEvaluationData = [NSData dataFromFileName:@"f4_seec_evaluation"];
    
    //NSLog(@" response of data %@", previousEvaluationData);
    
    if (previousEvaluationData!=nil) {
        
        
        NSError *error = nil;
        
        
        NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        
        
        phase = [[SEECUser sharedInstance]phaseNum];
    
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@" phaseNum ==%@", phase];
    
        
       
        NSArray *leads = [response filteredArrayUsingPredicate:predicate];
    
        NSLog(@"  JSON EVAL =   %@", leads );
    
        //edit key
        NSArray *uniqueLeads = [leads valueForKeyPath:@"@distinctUnionOfObjects.fK_branchId"];
    
        NSLog(@" uniqueLeads === %@", uniqueLeads);
    
        selectedBranches = [[NSMutableArray alloc] initWithArray:uniqueLeads];
        
    }else{
        phase = [[SEECUser sharedInstance]phaseNum];
        NSLog(@"No Existen evaluaciones para %@", phase);
    }
    
}






- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    // Return the number of sections.
    return 1;
}



- (void)viewDidUnload
{
    [super viewDidUnload];

}






- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    
    return (interfaceOrientation == UIInterfaceOrientationLandscapeRight);
}





- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    
    NSLog(@"numero de elementos %d", selectedBranches.count);
    return [self.selectedBranches count];
    
}



- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    
    cell = nil;
    
    cell = [tableView dequeueReusableCellWithIdentifier:@"Mycell"];
    
    if (cell == nil)
    {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:@"Mycell"];
    }
    
    //NSLog(@"  cell index %d", indexPath.row);
    
    //this we need to be optimized
    currentObject = [ selectedBranches objectAtIndex:indexPath.row];
    
 
    NSString *label = [NSString stringWithFormat:@"%@",currentObject];
    
    NSDictionary *recoverInfo  =  [self recoverInfo:  @"seec_branch" : @"LK_branchId == %@":label: @"dataroot" : @"seec_branch" ];
    
    cell.textLabel.text = [NSString stringWithFormat:@"%@", [recoverInfo valueForKey:@"branchName"]];
    
    // cell.textLabel.text =[currentObject description];
    
    return cell;
    
}



- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    
    
}







#pragma mark - Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    
    /*
    //get id
    
    currentObject = [ selectedBranches objectAtIndex:indexPath.row];
    
    NSString *Bid = [NSString stringWithFormat:@"%@",currentObject];
    
    [[SEECUser sharedInstance]initBranchId:Bid];
    
    NSLog(@"label selected is %@", Bid);
     
    */
    
    
    

    
    
    NSString *branchId = [ selectedBranches objectAtIndex:indexPath.row];
    
    
    currentObject = [ selectedBranches objectAtIndex:indexPath.row];
    
    
    NSString *label = [NSString stringWithFormat:@"%@",currentObject];
    
    NSDictionary *recoverInfoName  =  [self recoverInfo:  @"seec_branch" : @"LK_branchId == %@":label: @"dataroot" : @"seec_branch" ];
    
    NSString *branchName = [NSString stringWithFormat:@"%@", [recoverInfoName valueForKey:@"branchName"]];
    
    NSLog(@" branchName pop %@", branchName);
    
    NSLog(@" branchId  pop %@", branchId );
    
    NSArray *objKeys = [NSArray arrayWithObjects: @"branchName", @"branchId",  nil];
    
    NSArray *branchObjects = [NSArray arrayWithObjects:branchName , branchId, nil];
    
    NSDictionary *branchDictionary = [NSDictionary dictionaryWithObjects:branchObjects forKeys:objKeys];
   
    [[NSNotificationCenter defaultCenter] postNotificationName:@"BranchSelectedReplica" object:branchDictionary];

    
    
}





-(NSDictionary *) recoverInfo: (NSString *) fileJson
                             : (NSString *) query
                             : (NSString *) queryValues
                             : (NSString *) dataRoot
                             : (NSString *) setValue{
    
    NSURL *url = [[NSBundle mainBundle] URLForResource:fileJson withExtension:@"json"];
    
    NSData *data = [NSData dataWithContentsOfURL:url];
    
    NSError *error = nil;
    
    NSDictionary *response = AFJSONDecode(data, &error);
    
    NSPredicate *predicate = [NSPredicate predicateWithFormat: query,queryValues];
    
    
    NSArray *items =[[[response valueForKey:dataRoot] valueForKey:setValue] filteredArrayUsingPredicate:predicate];
    
    NSDictionary *currentObject =nil;
    
    if( [items count] > 0 ){
        currentObject = [ items objectAtIndex:0];
    }
    
    return currentObject;
    
}




@end