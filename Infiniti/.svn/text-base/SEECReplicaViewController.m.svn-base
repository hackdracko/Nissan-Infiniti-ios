/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
  
 */


#import "SEECReplicaViewController.h"
#import "AFJSONRequestOperation.h"
#import "NSDictionary+Persistence.h"
#import "NSArray+Persistence.h"
#import "AFHTTPClient.h"
#import "SEECServerRequest.h"
#import "AFJSONUtilities.h"
#import "SEECPhaseViewController.h"
#import "SEECPhaseWebViewController.h"
#import "SEECSearchByPhaseViewController.h"
#import "SEECSetSearchViewController.h"
#import "SEECUser.h"
#import "NSData+Persistence.h"
#import "SEECTypeViewController.h"
#import "SEECAlertViewController.h"
#import "SEECBranchFromWebViewController.h"
#import "JSONKit.h"
#import "SEECEvaluationWebViewController.h"
#import "UIImage+Persistence.h"

#import "RecipeCollectionViewController.h"

//image local service of pwc servers
//#define kIMAGE_SERVICE_BASE @"http://148.240.62.175/"


// IP services on Develop
//#define kIMAGE_SERVICE_BASE @"http://201.175.46.102/"

//DND is for production https://seec.bestoption.com.mx/
#define kIMAGE_SERVICE_BASE @"https://seec.bestoption.com.mx/"

//kompresor
#define kIMAGE_DEFAULT_COMPRESSION 0.65



@interface SEECReplicaViewController ()

@end

@implementation SEECReplicaViewController
@synthesize PhaseLabel;
@synthesize activity;
@synthesize tableViewDealersByPhase;
@synthesize replicaLabel;
@synthesize BranchLabel;
@synthesize ipad2WebButton;
@synthesize web2iPadButton;
@synthesize testConectionButton;
@synthesize ReplicaTypeButton;
@synthesize phaseSelectorButton;
@synthesize replyEvidButton;
@synthesize ReplicaButton;
@synthesize FindBranchesButton;
@synthesize EvidenceLabel;

@synthesize ReplicaImagenButton;

NSString *jsonFileName2= @"f4_seec_evaluation";

//local variable to send or get values 
NSString *operation_ = @"";
NSString *direction_= @"";
NSString *phaseSelected_ = @"";
NSString *dealerIDSelected_ = @"";

BOOL *miImg=true;


RecipeCollectionViewController *imageCollection;

//-----
@synthesize arrayResponse;
@synthesize responseData;

@synthesize arrayResponseImage;
@synthesize responseDataImage;




- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}


- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    
}

- (void)viewDidLoad
{
    
  
    
    self.title=@"Replica";
    self.replicaLabel.text =@"";
    self.PhaseLabel.text =@"";
    self.BranchLabel.text =@"";
    self.EvidenceLabel.text =@"";
    
    //clean
    direction_= @"";
    
    [[SEECUser sharedInstance]initBranchId:@""];
    [[SEECUser sharedInstance]initphaseNum:@""];
    
    [super viewDidLoad];
    
    
    
    
    [ReplicaTypeButton setHidden: YES];
    
    [phaseSelectorButton setHidden: YES];
    
    [ReplicaButton setHidden: YES];
    
    [replyEvidButton setHidden:YES];
    
    [FindBranchesButton setHidden:YES];
    
    
    [ReplicaImagenButton setHidden:YES];

   

    
    //notication of alert confirm
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(alertNotification:)
                                                 name:@"alert"
                                               object:nil];
    
    

    //notication of phase is here
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(PhaseWithNotification:)
                                                 name:@"phases"
                                               object:nil];

    
    //notication of type is here
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(TypeWithNotification:)
                                                 name:@"typeSelected"
                                               object:nil];
    

    
    //notication of branch is here
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(BranchReplicaNotification:)
                                                 name:@"BranchSelectedReplica"
                                               object:nil];
    
    //notication of evidence is here
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(EvidenceNotification:)
                                                 name:@"evidence"
                                               object:nil];
    
   
    
    // when user needs select the type of replica
    SEECTypeViewController *type = [[SEECTypeViewController alloc] initWithStyle:UITableViewStylePlain];
    UINavigationController *navCtrlType = [[UINavigationController alloc] initWithRootViewController:type];
    [type release];
    self.popOverType = [[UIPopoverController alloc] initWithContentViewController:navCtrlType];
    [navCtrlType release];
  
}

- (void)viewDidUnload
{
    [self setActivity:nil];
    [self setTableViewDealersByPhase:nil];
    [self setPhaseLabel:nil];
    [super viewDidUnload];
    // Release any retained subviews of the main view.
}




- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationLandscapeRight);
}




- (void)PhaseWithNotification:(NSNotification *)notification{
    
   
    NSDictionary *phasesIds = notification.object;
    
    NSLog(@" id  ==  %@",  [phasesIds valueForKey:@"id"]);
    
    NSLog(@" label  == %@",  [phasesIds valueForKey:@"label"]);
        
    PhaseLabel.text = [phasesIds valueForKey:@"label"];
    
    phaseSelected_ = [phasesIds valueForKey:@"id"];
    
    //setting at object
    
    [[SEECUser sharedInstance]initphaseNum:[phasesIds valueForKey:@"id" ]];
    
    NSLog(@" phase notification");
    
        
    [self.popOverPhase dismissPopoverAnimated:YES];
    
    //enable finder
    
     [FindBranchesButton setHidden:NO];
    
    //--------------------------------------------------
    
    if( [direction_ isEqual:@"FromiPad2Web"] ){
        
        
        SEECSearchByPhaseViewController *localBranches = [[SEECSearchByPhaseViewController alloc] initWithStyle:UITableViewStylePlain];
        
        
        
        UINavigationController *navCtrolp = [[UINavigationController alloc] initWithRootViewController:localBranches];
        
        
        [localBranches release];
        
        
        self.popOverBranch = [[UIPopoverController alloc] initWithContentViewController:navCtrolp];
        
        [navCtrolp release];
       
        
        
    }
    
    
    
    if( [direction_ isEqual:@"FromWeb2iPad"] ){
        
        NSLog(@" get branches from web ");
        
        
        SEECBranchFromWebViewController *branchesWeb = [[SEECBranchFromWebViewController alloc] initWithStyle:UITableViewStylePlain];
        
        UINavigationController *navCtrol = [[UINavigationController alloc] initWithRootViewController:branchesWeb];
        
        [branchesWeb release];
        
        self.popOverBranch = [[UIPopoverController alloc] initWithContentViewController:navCtrol];
        
        [navCtrol release];
        
        
    }
    
    

    
}




- (void)alertNotification:(NSNotification *)notification{
    
     NSString *entity = [notification.object valueForKey:@"entity"];
    
    if( [entity isEqual:@"FromiPad2Web"] ){
        NSLog(@" fk_branchId .....%@", [[SEECUser sharedInstance]branchId] );
        NSLog(@" phaseNum ........%@", [[SEECUser sharedInstance]phaseNum] );
        [self upLoad];
    }
    
    
    
    if( [entity isEqual:@"FromWeb2iPad"] ){
        NSLog(@" fk_branchId ,,,,,,,%@", [[SEECUser sharedInstance]branchId] );
        NSLog(@" phaseNum ,,,,,,,,,,%@", [[SEECUser sharedInstance]phaseNum] );
        [self download];
    }
    
    
    if( [entity isEqual:@"UploadFile"] ){
        NSLog(@" fk_branchId ,,,,,,,%@", [[SEECUser sharedInstance]branchId] );
        NSLog(@" phaseNum ,,,,,,,,,,%@", [[SEECUser sharedInstance]phaseNum] );
        
        [self sendFileToServer];
        [replyEvidButton setHidden:NO];
        EvidenceLabel.text=@"Evidencia enviada.";
        
        SEECEvaluationWebViewController *evidence = [[SEECEvaluationWebViewController alloc] initWithStyle:UITableViewStylePlain];
        
       
        
        UINavigationController *navCtrole = [[UINavigationController alloc] initWithRootViewController:evidence];
        [evidence release];
        self.popOverEvidences = [[UIPopoverController alloc] initWithContentViewController:navCtrole];
        [navCtrole release];
        self.title = @"Listo para subir archivos";
    }

    
}



- (void)BranchReplicaNotification:(NSNotification *)notification{
    
    
    
    NSLog(@"BranchReplicaNotification ");
    
    NSString *branchName = [notification.object valueForKey:@"branchName"];
   
    BranchLabel.text=branchName;
    
   [[SEECUser sharedInstance]initbName:branchName];
    
    NSString *branchId = [notification.object valueForKey:@"branchId"];
    
    [[SEECUser sharedInstance]initBranchId:branchId];
    
    NSLog(@" branchName  %@", branchName);
    
    NSLog(@" branchId   %@", branchId );
    
    
    [ReplicaButton setHidden: NO];
   
    
    [self.popOverBranch dismissPopoverAnimated:YES];
    
    
    
    
    
   if( [direction_ isEqual:@"FromiPad2Web"] ){
       
      [replyEvidButton setHidden:NO];
       
    
    SEECEvaluationWebViewController *evidence = [[SEECEvaluationWebViewController alloc] initWithStyle:UITableViewStylePlain];
    
    //self.title = @"Buscar archivos.";
       
    UINavigationController *navCtrole = [[UINavigationController alloc] initWithRootViewController:evidence];
    
    
    [evidence release];
    
    self.popOverEvidences = [[UIPopoverController alloc] initWithContentViewController:navCtrole];
    
    [navCtrole release];
   
       //Llenar images
       UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
       imageCollection=[[storyboard instantiateViewControllerWithIdentifier:@"RecipeCollectionViewController"]retain];
       
       responseDataImage = [[NSMutableData data] retain];
       [self conectionpostImage];
       [ReplicaImagenButton setHidden:NO];
       
       //fin llenado
    
   }
    
    
    if( [direction_ isEqual:@"FromWeb2iPad"] ){
        
        [replyEvidButton setHidden:YES];
        
    }
    

    
    
}






- (void)EvidenceNotification:(NSNotification *)notification{
    
     NSDictionary *evidence = notification.object;
    [[SEECUser sharedInstance]initFileName_:[evidence valueForKey:@"fileName"]];
    [[SEECUser sharedInstance]initEvaluationID_:[evidence valueForKey:@"evaluationId"]];
    NSString *evidenceFile = [evidence valueForKey:@"evidenceFile"];
    [self.popOverEvidences dismissPopoverAnimated:YES];
    //choose direction of replica
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SEECAlertViewController *alertR = [storyboard instantiateViewControllerWithIdentifier:@"SEECAlertViewController"];
    //throw alert
    [self presentModalViewController:alertR animated:NO];
    //custom alert
    alertR.entity=@"UploadFile";
    alertR.operationLabel.text = @"Subir Evidencia";
    alertR.directionLabel.text = evidenceFile;
    alertR.branchLabel.text =[[SEECUser sharedInstance]bName];
    alertR.phaseLabel.text = [@"Ronda: "stringByAppendingString: phaseSelected_];
    
}




- (void)TypeWithNotification:(NSNotification *)notification{
    
    
    
    NSDictionary *objid = notification.object;
    
    NSString *cmp = [objid valueForKey:@"label"];
    
    operation_ = [objid valueForKey:@"label"];
    
    
    

    
    
    //Evaluation
    if( [cmp isEqual:@"Evaluaciones" ]   ){
        
               
      
        if( [direction_ isEqual:@"FromiPad2Web"] ){
            
            
           SEECPhaseViewController *phases = [[SEECPhaseViewController alloc] initWithStyle:UITableViewStylePlain];
            
            UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:phases];
            
            
            [phases release];
            
            
            self.popOverPhase = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
            
            [navCtrl release];
            
            
            [phaseSelectorButton setHidden:NO];
            
        
        }
        
        
        
        if( [direction_ isEqual:@"FromWeb2iPad"] ){
         
            

           SEECPhaseWebViewController *phases = [[SEECPhaseWebViewController alloc] initWithStyle:UITableViewStylePlain];
            
            
            
            UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:phases];
            
            
            [phases release];
            
            
            self.popOverPhase = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
            
            [navCtrl release];
            
            
            
            [phaseSelectorButton setHidden:NO];

            
        }
        
        
        
        
    }
    
    
       
    NSLog(@" type id  %@",  [objid valueForKey:@"id"]);
    
    NSLog(@" type label %@",  [objid valueForKey:@"label"]);
    
    self.replicaLabel.text =[objid valueForKey:@"label"];
    
    [self.popOverType dismissPopoverAnimated:YES];
    
    
}






- (IBAction)doReplicationEvidence:(UIButton *)sender{
    //developer use
    //[self testImageForDevelopers];
    
    //set lunch
    [self.popOverEvidences  presentPopoverFromRect:sender.frame
                                        inView:self.view
                      permittedArrowDirections:UIPopoverArrowDirectionLeft
                                    animated:NO ];
}


/*
-(void) testImageForDevelopers {
    
    
    //small image for test a local image
    /// photo persistence MDS-1364926825
    /// user:@"1749" evaluationID:@"371947"];
    UIImage *localImage = [UIImage imageNamed: @"persistencia.jpg"];
    [self postImage:localImage withName:@"PruebaIpad3" user:@"1749" evaluationID:@"371947"];
    self.title = @"Subiendo evidencia en desarrollo 1.";
    
    //NSString *pathWithParameters = [NSString stringWithFormat:@"/ImagePwc/Upload/%@/%@/%@/%@", imageName, @"png", user, evaluationID];
    
    
    //hard code image / user / evaluation ID
    //UIImage *persistence = [UIImage imageFromFileName:@"MDS-1363818115"];
    //[self postImage:persistence withName:@"MDS-1363818115" user:@"5" evaluationID:@"113150"];
    //self.title = @"Subiendo evidencia en desarrollo 2.";
}

*/


- (IBAction)SelectorPhases:(UIButton *)sender {
    
     self.BranchLabel.text =@"";
     self.EvidenceLabel.text =@"";
    
    [self.popOverPhase  presentPopoverFromRect:sender.frame
                                             inView:self.view
                           permittedArrowDirections:UIPopoverArrowDirectionLeft
                                           animated:NO ];
    [replyEvidButton setHidden:YES];
    NSLog(@"Phase");
    
    
}





- (IBAction)SelectorType:(UIButton *)sender{

    self.replicaLabel.text =@"";
    self.PhaseLabel.text =@"";
    self.BranchLabel.text =@"";
     self.EvidenceLabel.text =@"";
    
    [phaseSelectorButton setHidden: YES];
    [ReplicaButton setHidden: YES];
    [replyEvidButton setHidden:YES];
    [FindBranchesButton setHidden:YES];
    
    [self.popOverType  presentPopoverFromRect:sender.frame
                                        inView:self.view
                      permittedArrowDirections:UIPopoverArrowDirectionLeft
                                      animated:NO ];
    
    NSLog(@"type");


}




- (IBAction)SelectorBranch:(UIButton *)sender {
    

    self.BranchLabel.text =@"";
     self.EvidenceLabel.text =@"";
     [replyEvidButton setHidden:YES];

    
    [self.popOverBranch  presentPopoverFromRect:sender.frame
                                        inView:self.view
                      permittedArrowDirections:UIPopoverArrowDirectionLeft
                                      animated:NO ];
    
    NSLog(@"Branch");
    
    
}








- (IBAction)testConection:(id)sender{
    
         self.title=@"Probando Conexión";
    
        //using method POST on PWC Server
        //http://201.175.46.102/wcfpwc/Replica.svc/phase
        //prodcution
        //https://seec.bestoption.com.mx/wcfpwc/Replica.svc/phase
        // Do not edit
    
    
        [activity startAnimating];
         
        NSString *string =@"";
        
        NSDictionary *dictionary = AFJSONDecode([string dataUsingEncoding:NSUTF8StringEncoding], nil);
        
      
    
        [[SEECServerRequest sharedSEECServerRequest] postPath:@"wcfpwc/Replica.svc/phase"
                                                   parameters:dictionary
                                                      success:^(AFHTTPRequestOperation *operation, id responseObject) {
                                                          NSString *string = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
                                                          
                                                          NSLog(@"Success! %@", string);
                                                          [self showAlertMsg:@"Conexión Exitosa"];
                                                          self.title=@"iPad Lista para Replicar";
                                                          [activity stopAnimating];
                                                          
                                                      } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
                                                          
                                                          NSLog(@"Failure");
                                                          [self showAlertMsg:@"Sin Conexión"];
                                                          self.title=@"Revisa tu Conexión a Internet";
                                                          [activity stopAnimating];
                                                          
                                                      }];
    
    

}









-(void)upLoad{
    
  NSString *string = [self convertFormat];
   
  NSLog(@" JSON %@", string);
   
  NSDictionary *dictionary = AFJSONDecode([string dataUsingEncoding:NSUTF8StringEncoding], nil);
    
    //developer server
    //URL = http://201.175.46.102/wcfpwc/Replica.svc/ipad2server
    //Production sever
    //https://seec.bestoption.com.mx/wcfpwc/Replica.svc/phase
    
    [[SEECServerRequest sharedSEECServerRequest] postPath:@"wcfpwc/Replica.svc/ipad2server"
                                               parameters:dictionary
                                                  success:^(AFHTTPRequestOperation *operation, id responseObject) {
                                                      NSString *string = [[NSString alloc] initWithData:responseObject encoding:NSUTF8StringEncoding];
                                                      
                                                      NSLog(@"Success! %@", string);
                                                      [self showAlertMsg:@"Éxito!"];
                                                      [activity stopAnimating];
                                                      self.title = @"Evaluaciones enviadas.";
                                                  } failure:^(AFHTTPRequestOperation *operation, NSError *error) {
                                                      [self showAlertMsg:@"Ooops!"];
                                                       self.title = @"Servidor Ocupado.";
                                                      NSLog(@"Error %@", error);
                                                      [activity stopAnimating];
                                                  }];        
    
   
}



- (void) viewWillAppear:(BOOL)animated
{
   
    if(imageCollection.collectionView!=nil){imageCollection.collectionView=nil;[imageCollection.collectionView release];}
    if(imageCollection.evaluationsWeb!=nil){imageCollection.evaluationsWeb=nil;}
    if(imageCollection!=nil){imageCollection=nil; [imageCollection release]; [imageCollection removefromSuperview];}
    if(arrayResponseImage!=nil){arrayResponseImage=nil;}
    if(responseDataImage!=nil){responseDataImage=nil;}
    
    
    self.replicaLabel.text =@"";
    self.PhaseLabel.text =@"";
    self.BranchLabel.text =@"";
    [phaseSelectorButton setHidden: YES];
    [replyEvidButton setHidden:YES];
    [FindBranchesButton setHidden:YES];
    [ReplicaImagenButton setHidden:YES];
    [ReplicaButton setHidden:YES];
}

-(void) download{
    responseData = [[NSMutableData data] retain];
    [self conectionpost];
}


-(void) dealloc {
    //este método es llamado automáticamente cuando retain=0
    //no debe ser llamado manualmente
    [super dealloc];
}




- (IBAction)iPad2Web:(id)sender{

     NSLog(@"iPad2Web  [.] -------------> www ");
    // flag direction
    direction_ = @"FromiPad2Web";
    
    self.title=@"Replica de iPad a Web";
    
    UIImage *buttonImageON = [UIImage imageNamed:@"ipad_web_on.png"];
    [ipad2WebButton setImage:buttonImageON forState:UIControlStateNormal];
    [self.view addSubview:ipad2WebButton];
    
    
    UIImage *buttonImageOFF = [UIImage imageNamed:@"web-ipad.png"];
    [web2iPadButton setImage:buttonImageOFF forState:UIControlStateNormal];
    [self.view addSubview:web2iPadButton];
    
    //enable next butt
    [ReplicaTypeButton setHidden:NO];
    
    [phaseSelectorButton setHidden:YES];
    [replyEvidButton setHidden: YES];

    [ReplicaButton setHidden: YES];
    [replyEvidButton setHidden:YES];
    [FindBranchesButton setHidden:YES];
    
    
    self.replicaLabel.text =@"";
    self.PhaseLabel.text =@"";
    self.BranchLabel.text =@"";
    
}





- (IBAction)web2iPad:(id)sender{

     NSLog(@"web2iPad  [.] <------------- www ");
     //flag direction
     direction_ = @"FromWeb2iPad";
    
     self.title=@"Replica de Web a iPad";
    
    UIImage *buttonImageON = [UIImage imageNamed:@"web-ipad_on.png"];
    [web2iPadButton setImage:buttonImageON forState:UIControlStateNormal];
    [self.view addSubview:web2iPadButton];
    
    
    
    UIImage *buttonImageOFF = [UIImage imageNamed:@"ipad_web.png"];
    [ipad2WebButton setImage:buttonImageOFF forState:UIControlStateNormal];
    [self.view addSubview:ipad2WebButton];
    

    //enable next butt
    [ReplicaTypeButton setHidden:NO];
    
    [phaseSelectorButton setHidden:YES];
    [replyEvidButton setHidden: YES];
    
    [ReplicaButton setHidden: YES];
    [replyEvidButton setHidden:YES];
    [FindBranchesButton setHidden:YES];
    
    
    self.replicaLabel.text =@"";
    self.PhaseLabel.text =@"";
    self.BranchLabel.text =@"";
    
    
}



- (IBAction)doReplication:(id)sender{
    
    NSLog(@"doReplication");
    
   dealerIDSelected_ = [[SEECUser sharedInstance]branchId];
    
    //choose direction of replica
   UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
         SEECAlertViewController *alertR = [storyboard instantiateViewControllerWithIdentifier:@"SEECAlertViewController"];
    
  //throw alert
  [self presentModalViewController:alertR animated:NO];
    
  //custom alert
  alertR.entity=direction_;
  alertR.operationLabel.text = operation_;
  alertR.directionLabel.text = self.title;
  alertR.branchLabel.text =[[SEECUser sharedInstance]bName];
  alertR.phaseLabel.text = [@"Ronda: "stringByAppendingString: phaseSelected_];
   
}




-(void) sendFileToServer {

    NSLog(@"EvidenceNotification ");
    
    //[self.popOverEvidences dismissPopoverAnimated:YES];
    
    NSLog(@"sending test image");
    
    //posting image
    
    // Images seem to have the following name in format: @"MDS-%0.0f"
    UIImage *testImage = [UIImage imageFromFileName:[[SEECUser sharedInstance]fileName_]];
    
    self.title = @"Subiendo evidencia";
    
    //[self postImage:testImage withName:fileName user:user evaluationID:evaluationId];
    
    //make post of imagen
    [self postImage:testImage withName:[[SEECUser sharedInstance]fileName_] user:@"1749" evaluationID:[[SEECUser sharedInstance]evaluationID_]];
    
    self.title = @"Evidencia lista";
    
    //borrar imagen
    [self deleteJsonEvidense:[[SEECUser sharedInstance]fileName_]];
    
    self.title = @"Actualizar evidencias";
    
    [self.popOverEvidences dismissPopoverAnimated:YES];
    
    
    
    /*
    if( [direction_ isEqual:@"FromiPad2Web"] ){
        
        
        
        SEECEvaluationWebViewController *evidence = [[SEECEvaluationWebViewController alloc] initWithStyle:UITableViewStylePlain];
        
        //self.title = @"Buscar archivos.";
        
        UINavigationController *navCtrole = [[UINavigationController alloc] initWithRootViewController:evidence];
        
        
        [evidence release];
        
        self.popOverEvidences = [[UIPopoverController alloc] initWithContentViewController:navCtrole];
        
        [navCtrole release];
        
        self.title = @"Listo para subir archivos";
        
    }
   */ 




}




-(NSMutableArray *)getJsonFromFile{
    
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName2];
    
    if (previousEvaluationData!=nil) {
    
    NSError *error = nil;
        
    NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        
    if (error)
    {
        NSLog(@"Error while reading JSON");
    }
        
    //edit key values
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@" fK_branchId == %@ AND phaseNum == %@ ",[[SEECUser sharedInstance]branchId], [[SEECUser sharedInstance]phaseNum]];
      
    NSLog(@"branch = %@", [[SEECUser sharedInstance]branchId]);
        
    NSLog(@"phaseNum = %@", [[SEECUser sharedInstance]phaseNum]);
        
    NSArray *samples = [response filteredArrayUsingPredicate:predicate];
        
    NSLog(@" items in array response %d", [samples count ] );
    
      if([samples count ]==0){
        return [self getDummyEvaluation];
      }else{
          NSMutableArray *mutableArray = [samples mutableCopy];
          return mutableArray;
      }
    }else{
        return [self getDummyEvaluation];
    }
    
    
   
}



-(NSString *)getJsonEvidencesImage{
    
    //get all samples
    NSArray *allEvidence = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    
    //set log samples
    NSLog(@"array of evideneces %@", allEvidence);
    
    //create a query
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@" branchID == %@ AND phase == %@ AND status==%@ and activityId != %@",[[SEECUser sharedInstance]branchId], [[SEECUser sharedInstance]phaseNum],@"0",@""];//27052013
    
    //filtering
    NSArray *samples = [allEvidence filteredArrayUsingPredicate:predicate];
    
    //filtres to log
    NSLog(@"array of samples %@", samples);
    
    //prepare to string
    NSMutableArray *mutableArray = [samples mutableCopy];
    
    NSString *jAnswersJSONFormat = [mutableArray JSONString];
    
    return jAnswersJSONFormat;
    
    
}




-(NSString *)getJsonEvidences{
    
    //get all samples
    NSArray *allEvidence = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    
    //set log samples
    NSLog(@"array of evidences %@", allEvidence);
    
    //create a query
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@" branchID == %@ AND phase == %@ ",[[SEECUser sharedInstance]branchId], [[SEECUser sharedInstance]phaseNum]];
    
    //filtering 
    NSArray *samples = [allEvidence filteredArrayUsingPredicate:predicate];
    
    //filtres to log
    NSLog(@"array of samples %@", samples);
    
    //prepare to string
    NSMutableArray *mutableArray = [samples mutableCopy];
    
    NSString *jAnswersJSONFormat = [mutableArray JSONString];
    
   
    
    return jAnswersJSONFormat;
    
    
}








-(void)showAlertMsg:(NSString *)msgtext{
    
	NSString *title = @"Replica";
	
    UIAlertView* alertView = nil;
    
    alertView = [[UIAlertView alloc] initWithTitle:title message:msgtext delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alertView show];
    
    [alertView release];
}






-( NSMutableArray *) getDummyEvaluation{
    
    NSArray *objects = [NSArray arrayWithObjects:
                                    @"1",
                                    [[SEECUser sharedInstance]FK_userId],
                                    @"1",
                                    @"1",
                                    @"0",
                                    [[SEECUser sharedInstance]branchId],
                                    @"1",
                                    @"1",
                                    [[SEECUser sharedInstance]phaseNum],
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    @"1",
                                    nil];
    
    
    
    
    NSArray *keys = [NSArray arrayWithObjects:
                                  @"lK_evaluationId",
                                  @"fK_userId",
                                  @"fK_manualId",
                                  @"fK_standardId",
                                  @"fK_activityId",
                                  @"fK_branchId",
                                  @"fK_departmentId",
                                  @"fK_ownerId",
                                  @"phaseNum",
                                  @"reached",
                                  @"notReached",
                                  @"notApplicable",
                                  @"certificationLevel",
                                  @"commentTitle",
                                  @"comment",
                                  @"recommendation",
                                  @"createdDate",
                                  @"actionPlan",
                                  @"estimatedImpDate",
                                  @"actionPlanDate",
                                  @"actionPlanComment",
                                  @"commentDate",
                                  @"actionPlanApprove",
                                  @"furtherContribution",
                                  @"tracking",
                                  @"specialStandard",
                                  nil];
 
  NSDictionary *dictionary = [NSDictionary dictionaryWithObjects:objects
                                                                       forKeys:keys];
  //mutable
   NSMutableArray *mutable = [[NSMutableArray alloc] init];
   
  //add
  [mutable addObject:dictionary];
    
  return mutable;

}





-(void) addEvaluation :(NSMutableArray *)targetArray
{
    
    // Load previous array of captures
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName2];
    
    if (previousEvaluationData == nil) {
        
        //diccionary here
        
       NSLog(@"El archivo no existe!, por que es la primera vez!, agregamos primer registro");
        
       NSError *error = nil;
        
       NSData *newMetadata = AFJSONEncode(targetArray, &error);    // Encode this as JSON
        
        [newMetadata saveDataWithFileName:jsonFileName2];  // Save it using our persistence layer
        
        
    }else{
        
        
        NSLog(@"El archivo si existe!, agregamos registros!");
        
        NSError *error = nil;
        
        //previus data load as JSON firmat
        NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        
        
        if (response != nil)    // Previous captures exist
        {
            [targetArray addObjectsFromArray:response];
        }
        
        
        NSData *newMetadata = AFJSONEncode(targetArray, &error);    // Encode this as JSON
        
        [newMetadata saveDataWithFileName:jsonFileName2];  // Save it using our persistence layer
        
        
    }
    
    [self showAlertMsg:@"Evaluación salvada"];

    
    
}






#pragma mark - Image Posting

- (void)postImage:(UIImage *)capturedImage withName: (NSString *) imageName user:(NSString *)user evaluationID: (NSString *) evaluationID
{
    if (!capturedImage ||
        ![imageName length] ||
        ![user length] ||
        ![evaluationID length]) return;     // Avoiding empty or missing parameters
    
    NSURL *serverImageBaseURL = [NSURL URLWithString:kIMAGE_SERVICE_BASE];
    
    AFHTTPClient *clientForImage = [[AFHTTPClient alloc] initWithBaseURL:serverImageBaseURL];
    
    
    NSLog(@" base url is  %@", serverImageBaseURL);
    
    NSData *imageData = UIImagePNGRepresentation(capturedImage);
    
    //original
    //NSString *pathWithParameters = [NSString stringWithFormat:@"/ImagePwc/Upload/%@/%@/%@/%@", imageName, @"png", user, evaluationID];
    
    //new
    //ImagePwc/UploadService.svc/Upload
    NSString *pathWithParameters = [NSString stringWithFormat:@"imagepwc/UploadService.svc/Upload/%@/%@/%@/%@", imageName, @"png", user, evaluationID];
    
    
    NSLog(@"the url to invoke is --------%@", pathWithParameters);
    
    
    NSMutableURLRequest *imagePostRequest = [clientForImage multipartFormRequestWithMethod:@"POST"
                                                                                      path:pathWithParameters
                                                                                parameters:nil
                                                                 constructingBodyWithBlock:^(id <AFMultipartFormData>formData) {
                                                                     [formData appendPartWithFileData:imageData name:imageName
                                                                                             fileName:[imageName stringByAppendingString:@".png"]
                                                                                             mimeType:@"image/png"];
                                                                 }];
    
    
    
    AFHTTPRequestOperation *operation = [[AFHTTPRequestOperation alloc] initWithRequest:imagePostRequest];
    
//    [operation setUploadProgressBlock:nil];
    
    
    [clientForImage enqueueHTTPRequestOperation:operation];
    
    
    NSLog(@"end test image");
    
}





-(void)conectionpost{
    
    //Developer
   //NSString *urlBase = @"http://201.175.46.102/wcfpwc/Replica.svc/server2ipad";
    
    //Production
    NSString *urlBase = @"https://seec.bestoption.com.mx/wcfpwc/Replica.svc/server2ipad";
    
    
    NSMutableURLRequest *request =
    [[NSMutableURLRequest alloc] initWithURL:
     [NSURL URLWithString:urlBase]];
    
    [request setHTTPMethod:@"POST"];
    
    NSString *postString =[self convertFormat];
    
    
    [request setValue:[NSString
                       stringWithFormat:@"%d", [postString length]]
   forHTTPHeaderField:@"Content-length"];
    
    [request setHTTPBody:[postString
                          dataUsingEncoding:NSUTF8StringEncoding]];
    
    [[NSURLConnection alloc] initWithRequest:request delegate:self];
    
    
  
    
}





- (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
    [responseData setLength:0];
    [responseDataImage setLength:0];
 
}





- (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
    [responseData appendData:data];
    [responseDataImage appendData:data];
    
}





- (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
    self.title = @"Revisar la conexión Internet";
    NSLog(@"Connection failed: %@", [error description]);
}





- (void)connectionDidFinishLoading:(NSURLConnection *)connection {

    
    [connection release];
    if(miImg)
    {
    NSString *responseString = [[NSString alloc] initWithData:responseData encoding:NSUTF8StringEncoding];
    
    [responseData release];
    
    
    NSLog(@" responding from web evidences %@", responseString);
    
    
    //using json kit
    NSDictionary *dictionary = [responseString objectFromJSONString];
    
    //the root in json 
    NSArray *response = [dictionary objectForKey:@"evaluation"];
    
    arrayResponse = [[NSArray alloc] initWithArray:response];
    
    NSLog(@" count  %d", [arrayResponse count]);
    
    self.title = [ [NSString stringWithFormat:@"%d", [arrayResponse count]] stringByAppendingFormat:@" Evaluaciones salvadas." ];
    
    //converter
    NSMutableArray *mutableArray = [NSMutableArray arrayWithArray: arrayResponse];
    
    //add
    [self addEvaluation:mutableArray];
    
    //----------------------
    }
    else{
    
    NSString *responseStringImage = [[NSString alloc] initWithData:responseDataImage encoding:NSUTF8StringEncoding];
    
    [responseDataImage release];
    
    
    NSLog(@" responding from web evidences %@", responseStringImage);
    
    
    //using json kit
    NSDictionary *dictionaryImage = [responseStringImage objectFromJSONString];
    
    //the root in json
    NSArray *responseImage = [dictionaryImage objectForKey:@"evidences"];
    
    arrayResponseImage = [[[NSArray alloc] initWithArray:responseImage]retain];
    
    NSLog(@" count  %d", [arrayResponseImage count]);
        miImg=true;
    }
    
}





-(NSString *) convertFormat {
 
     NSMutableArray *targetArray = [self getJsonFromFile];
    
      NSLog(@" count of json file  %d", [targetArray count]);
    
    
        NSMutableArray *allSamples = [[NSMutableArray alloc] init];
    
    
            for (int i=0; i<[targetArray count];  ++i)
            {
                
 
               NSDictionary *anEvaluation = [targetArray objectAtIndex:i];
                
                /* 
                  NSLog(@"fK_branchId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_branchId"]]);
                  NSLog(@"lK_evaluationId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"lK_evaluationId"]]);
                  NSLog(@"fK_userId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_userId"]]);
                  NSLog(@"fK_manualId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_manualId"]]);
                  NSLog(@"fK_standardId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_standardId"]]);
                  NSLog(@"fK_activityId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_activityId"]]);
                  NSLog(@"fK_departmentId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_departmentId"]]);
                  NSLog(@"fK_ownerId  : %@",[NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_ownerId"]]);
                */
                
                
                    NSArray *NewsKeys = [NSArray arrayWithObjects:
                                         @"lK_evaluationId",
                                         @"fK_userId",
                                         @"fK_manualId",
                                         @"fK_standardId",
                                         @"fK_activityId",
                                         @"fK_branchId",
                                         @"fK_departmentId",
                                         @"fK_ownerId",
                                         @"phaseNum",
                                         @"reached",
                                         @"notReached",
                                         @"notApplicable",
                                         @"certificationLevel",
                                         @"commentTitle",
                                         @"comment",
                                         @"recommendation",
                                         @"createdDate",
                                         @"actionPlan",
                                         @"estimatedImpDate",
                                         @"actionPlanDate",
                                         @"actionPlanComment",
                                         @"commentDate",
                                         @"actionPlanApprove",
                                         @"furtherContribution",
                                         @"tracking",
                                         @"specialStandard",
                                         nil];
                    
                    NSArray *NewsObjects = [NSArray arrayWithObjects:
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"lK_evaluationId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_userId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_manualId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_standardId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_activityId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_branchId"]],//
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_departmentId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"fK_ownerId"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"phaseNum"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"reached"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"notReached"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"notApplicable"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"certificationLevel"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"commentTitle"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"comment"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"recommendation"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"createdDate"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"actionPlan"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"estimatedImpDate"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"actionPlanDate"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"actionPlanComment"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"commentDate"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"actionPlanApprove"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"furtherContribution"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"tracking"]],
                                            [NSString stringWithFormat:@"%@", [anEvaluation valueForKey:@"specialStandard"]],
                                            nil];

                
                
                NSDictionary *current = [NSDictionary dictionaryWithObjects:NewsObjects                                                                           forKeys:NewsKeys];
                
                
                [allSamples addObject:current];
   
            }
    
    
    
         self.title = [ [NSString stringWithFormat:@"%d", [allSamples count]] stringByAppendingFormat:@" Evaluaciones en proceso." ];
    
         //NSLog(@" all samples using converter  %@", allSamples );
    
         return [allSamples JSONString];
   
}





///
-(void) deleteJsonEvidense: (  NSString *) FileName {
    //get all samples
    NSArray *response = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    NSMutableArray *allEvidence = [[NSMutableArray alloc] init];//1738
    //NSError *error = nil;
    
    //NSLog(@" samples ........%@", response);
    
    NSMutableArray *targetArray = [NSMutableArray array];
    
    NSMutableArray *newArray = [NSMutableArray array];
    
    //Add new definitions
    NSDictionary *valor;
    
    if (response != nil)    // Previous captures exist
    {
        
        
        [targetArray addObjectsFromArray:response];
        
        NSLog(@"BUSCANDO ARCHIVO ->%@", FileName);
        
        for (int i=0; i<[targetArray count]; ++i)
        {
            
            NSDictionary *foto = [response objectAtIndex:i];
            
            
            if ([[foto valueForKey:@"fileName"] isEqualToString:FileName])
            {
                //remove item
                NSLog(@" Estado Actualizado . .  .");
                //[targetArray removeObject: i];
                valor=foto;
                
            }
            else{
                
                [newArray addObject:foto];
                
            }
            
        }
        
        //NSLog(@"Update removed file on  json %@",newArray);
        
        [newArray saveArrayWithFileName:@"seec_evidenceFile.json"];//Erase the inf
        
        //NSString *consecutive = [NSString stringWithFormat:@"%d", [response count]+1];
        //NSMutableArray *allEvidence = [[NSMutableArray alloc] init];//working perfect
        
        /*Updating the files*/
        NSArray *keys = @[@"lk_evidenceFileID",
                          @"fk_evaluationID",
                          @"fk_userID",
                          @"fileName",
                          @"evidenceFile",
                          @"contentType",
                          @"fileSize",
                          @"attachDate",
                          @"activefile",
                          @"status",
                          @"phase",
                          @"branchID",
                          @"activityId",
                          @"evaluationId"];
        
        
        NSArray *objects = @[[valor valueForKey:@"lk_evidenceFileID"],
                             [valor valueForKey:@"fk_evaluationID"],
                             [valor valueForKey:@"fk_userID"],
                             [valor valueForKey:@"fileName"],
                             [valor valueForKey:@"evidenceFile"],
                             @"image/png",
                             [valor valueForKey:@"fileSize"],
                             [valor valueForKey:@"attachDate"],
                             [valor valueForKey:@"activefile"],
                             @"1",
                             [valor valueForKey:@"phase"],
                             [valor valueForKey:@"branchID"],
                             [valor valueForKey:@"activityId"],
                             @"0" ];
        
        
        NSDictionary *currentImageDictionary = [NSDictionary dictionaryWithObjects:objects
                                                                           forKeys:keys];
        //Updating ...
        
        NSArray *arrayOfEvidence = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
        
        //NSLog(@"valores nuevos %@",arrayOfEvidence);
        if (arrayOfEvidence)
        {
            [allEvidence addObjectsFromArray:arrayOfEvidence];
        }
        
        [allEvidence addObject:currentImageDictionary];
        
        [allEvidence saveArrayWithFileName:@"seec_evidenceFile.json"];
        
        
        
    }
}


- (IBAction)doImg:(id)sender
{
   
    NSMutableArray *itemsToKeep = [NSMutableArray array];
    int i=0;
    for (id object in arrayResponseImage) {
                
                if(i<35)
                {
                                           
                    [itemsToKeep addObject:object];
                     i++;
                    
                }
    
       
        }
    
    
    imageCollection.evaluationsWeb=[[NSMutableArray arrayWithArray:itemsToKeep]retain];
   //alertR.evaluationsWeb=[[NSMutableArray arrayWithArray:self.arrayResponseImage]retain];
   
    
    [self.navigationController pushViewController:imageCollection animated:YES];
   
}









-(void)conectionpostImage{
    
    miImg=false;
    
    //NSString *urlBase = @"http://201.175.46.102/wcfpwc/Replica.svc/eval2ipad";
    
    
    NSString *urlBase = @"https://seec.bestoption.com.mx/wcfpwc/Replica.svc/eval2ipad";
    
    
    NSMutableURLRequest *request =
    [[NSMutableURLRequest alloc] initWithURL:
     [NSURL URLWithString:urlBase]];
    
    [request setHTTPMethod:@"POST"];
    
    NSString *postString =[self getJsonEvidencesImage];
    
    NSLog(@"post string %@",postString);
    
    
    [request setValue:[NSString
                       stringWithFormat:@"%d", [postString length]]
   forHTTPHeaderField:@"Content-length"];
    
    [request setHTTPBody:[postString
                          dataUsingEncoding:NSUTF8StringEncoding]];
    
    [[NSURLConnection alloc] initWithRequest:request delegate:self];
    
    
}







@end
