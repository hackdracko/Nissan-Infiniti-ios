/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
 
 */

#import "SEECNSSWDetailViewController.h"

#import "AFJSONUtilities.h"
#import "SEECUser.h"
#import "SEECEvaluationViewController.h"
#import "NSData+Persistence.h"


@interface SEECNSSWDetailViewController ()

@end


NSString *jsonFileName1 = @"f4_seec_evaluation";
NSDictionary *currentObjectEvaluation;


@implementation SEECNSSWDetailViewController

- (id)initWithStyle:(UITableViewStyle)style
{
    self = [super initWithStyle:style];
    self.title =@"Actividad";
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];

 
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_activity" withExtension:@"json"];
    NSData *dta = [NSData dataWithContentsOfURL:url];
    
    NSError *error = nil;
    
    NSDictionary *resp = AFJSONDecode(dta, &error);
    
    //use a filter by certification level
    //NSPredicate *predicate = [NSPredicate predicateWithFormat:@"FK_standardId == %@", self.actId];
    
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"FK_standardId ==  %@ AND certificationLevel == %@", self.actId, [[SEECUser sharedInstance]certificationLevel] ];
    

    
    //global var
     NSArray *actsled = [[[resp valueForKey:@"dataroot"] valueForKey:@"seec_activity"] filteredArrayUsingPredicate:predicate];
    
    
    
    _allAct = [[NSMutableArray alloc] initWithArray:actsled];
    
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationPortrait);
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{

       return [self.allAct count];
    
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
  
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    
    if (cell == nil)
    {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        

        
        
    }
    
    NSDictionary *currentObject = [self.allAct objectAtIndex:indexPath.row];
    
    NSString *scode = [currentObject valueForKey:@"standardSubCode"];
    NSString *spc = @".- ";
    NSString *code = [currentObject valueForKey:@"code"];
    
    NSString *activityId = [currentObject valueForKey:@"LK_activityId"];
    
    
    
    NSString *codeLabel = [[scode stringByAppendingString:spc] stringByAppendingString:code];
    
    // Configure the cell...
    
    
    
    cell.imageView.image = [ self recoverEvaluationFlags: activityId ];
    
    cell.textLabel.text = [NSString stringWithFormat:@"%@", codeLabel];
    
    //cell.textLabel.text = [NSString stringWithFormat:@"%@", activityId];
    
    
    return cell;
    
}



- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{

    //not for now is for recover info with shared instace
    NSDictionary *currentObject = [self.allAct objectAtIndex:indexPath.row];
      
    //Setting to global Variables Satate
    [[SEECUser sharedInstance] initObj:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"objective"]]];
    [[SEECUser sharedInstance] initMth:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"method"]]];
    [[SEECUser sharedInstance] initAct:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"activityDesc"]]];
    [[SEECUser sharedInstance] initCode:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"code"]]];
    [[SEECUser sharedInstance] initEvid:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"evidence"]]];
    
    [[SEECUser sharedInstance] inittypeOfBreach:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"typeOfBreach"]]];
    
    
    //setting
    [[SEECUser sharedInstance ]initFK_activityId:[currentObject valueForKey:@"LK_activityId"]];
    
    [[SEECUser sharedInstance ]initFK_departmentId:[currentObject valueForKey:@"FK_departmentId"]];
    
        
    [[SEECUser sharedInstance ]initspecialStandard:[currentObject valueForKey:@"specialStandard"]];
    
    [[SEECUser sharedInstance ]initFK_standardId:[currentObject valueForKey:@"FK_standardId"]];
    
    
    //activity
    
    
    
    NSArray *objKeys = [NSArray arrayWithObjects: @"label", @"id",  nil];
    
    
    NSArray *branchObjects = [NSArray arrayWithObjects:[currentObject valueForKey:@"activityDesc"], [currentObject valueForKey:@"LK_activityId"], nil];
    
    
    NSDictionary *branchDictionary = [NSDictionary dictionaryWithObjects:branchObjects forKeys:objKeys];
    
    
    [[NSNotificationCenter defaultCenter] postNotificationName:@"manual" object:branchDictionary];
    
    
}










- (UIImage *) recoverEvaluationFlags: (NSString *) activityId {
    
    
    
    // Load previous array of captures
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName1];
    
    //NSLog(@" response of data %@", previousEvaluationData);
    
    if (previousEvaluationData!=nil) {
        
        
        NSError *error = nil;
        
        
        NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        
        
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@" fK_branchId == %@ AND fK_activityId ==%@ AND  phaseNum ==%@", [[SEECUser sharedInstance]FK_branchId], activityId , [[SEECUser sharedInstance]phaseNum] ];
        
      
        
        
        NSArray *leads = [response filteredArrayUsingPredicate:predicate];
        
        
        
        NSLog(@"Filtred response:  fk_branchId AND fk_activityId AND phaseNum  ----------  : %@", leads);
        
        
        
        
        if( [leads count] > 0 ){
            
            currentObjectEvaluation = [ leads objectAtIndex:0];
            
            NSString *notReached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notReached"]];
            
            NSString *notApp = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notApplicable"]];
            
            NSString *reached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"reached"]];
            
            
            
           NSLog(@" notReached  %@", notReached);
            
           NSLog(@" notApp  %@", notApp);
            
           NSLog(@" reached  %@", reached);
            
                  
            
            if( [notReached isEqualToString:@"1"] &&
                 [reached isEqualToString:@"0"]){
                 return [UIImage imageNamed: @"noReached.png"];
            }
            
            //json issue arrived  notApp <null>  
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"0"]) {
              return [UIImage imageNamed: @"notApplied.png"];
            }
            
            
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"1"]){
               return [UIImage imageNamed: @"applied.png"];
            }
            
            
      
            
            
        }else{
            
            
        }
        
        
        
    }//first time if
    
    return [UIImage imageNamed: @"noEvaluation.png"];
}




@end
