/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
  
 */


#import "SEECEvaluationViewController.h"
#import "SEECNSSWViewController.h"
#import "SEECNSSWViewController.h"
#import "SEECUser.h"
#import "AFJSONUtilities.h"
#import "NSData+Persistence.h"
#import "UIViewController+Camera.h"
#import "UIImage+Persistence.h"
#import "SEECApplyEvaluationViewController.h"
#import "NSArray+Persistence.h"
#import "SEECPhotoGallerySource.h"
#import "AFNetworking.h"

#import "SEECImageCollectorViewController.h"




#import "SEECViewController.h"



#define kIMAGE_SERVICE_BASE @"http://148.240.62.175:80"
#define kIMAGE_DEFAULT_COMPRESSION .65
@interface SEECEvaluationViewController ()

@end


@implementation SEECEvaluationViewController
@synthesize evidence1but;
@synthesize evidence2but;
@synthesize evidence3but;
@synthesize evidence;
@synthesize objetive;
@synthesize activity;
@synthesize method;
@synthesize specialStandard;
@synthesize certificationLevelImg;
@synthesize DealerLabel;
@synthesize codeLabel;
@synthesize standardName;
@synthesize TypeOfBreachLabel;
@synthesize DepartmentLabel;
@synthesize NameOfResponsibleLabel;
@synthesize PhaseLabel;
@synthesize evaluationStatus;







int evidenceCount; //count evidence
bool enableCamera; //camera enable


NSString *file1;
NSString *file2;
NSString *file3;



NSString *jsonFileName3 = @"f4_seec_evaluation";
NSDictionary *currentObjectEvaluation;





- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}








- (void)viewDidLoad
{
    [super viewDidLoad];
    
   

    self.title = @"Evaluaci√≥n";
    
    evidenceCount =0;
    enableCamera = FALSE;
    
    

    
    [evidence1but setHidden:YES];
    [evidence2but setHidden:YES];
    [evidence3but setHidden:YES];
    
    
    //clean actitivity when back
    [self cleanVariables];
    
    
	// Do any additional setup after loading the view.
    
    codeLabel.text=[SEECUser sharedInstance].code;
    standardName.text=[SEECUser sharedInstance].std;
    DealerLabel.text=[SEECUser sharedInstance].bName;
    
    
    //Set Date format
    NSDateFormatter *format = [[NSDateFormatter alloc] init];
    //[format setDateFormat:@"MMM dd, yyyy HH:mm"];
    //[format setDateFormat:@"yyyy MM, dd HH:mm"];
    //[format setDateFormat:@"dd-MM-yyyy HH:mm:ss"];
    
    [format setDateFormat:@"yyyy-MM-dd"];
    NSDate *now = [[NSDate alloc] init];
    NSString *dateString = [format stringFromDate:now];
    NSLog(@"dateString is |%@| ", dateString);
    [[SEECUser sharedInstance] initcreatedDate:dateString];
    
    
    //init pop overs
    [self initNSSW];
    [self initNSOS];
    [self initASDOS];
    [self initNSGP];
    [self initNREDI];
    [self initNMOS];
    [self initBPDOS];
    [self initNAOS];
    [self initNSRC];
    
    
    //match
    NSString * branchId = [[SEECUser sharedInstance] branchId];
    [[SEECUser sharedInstance]initFK_branchId:branchId];
    
    
    //notication of branch is here
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(manualNotification:)
                                                 name:@"manual"
                                               object:nil];
    
 
    
    //display cerification level
    if([[[SEECUser sharedInstance]certificationLevel] isEqualToString:@"Plata"]){
        [certificationLevelImg setImage:[UIImage imageNamed: @"certificado plata.png"]];
    }
    
    if([[[SEECUser sharedInstance]certificationLevel] isEqualToString:@"Oro"]){
        [certificationLevelImg setImage:[UIImage imageNamed: @"certificado oro.png"]];
    }
    
    //display phase
    PhaseLabel.text=[[SEECUser sharedInstance]phaseNumLabel];
    
    //clean form
    [self cleanForm];
    
    
    //evaluation form
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(upDateTree:)
                                                 name:@"done"
                                               object:nil];
    
    
    //gallery
    [[NSNotificationCenter defaultCenter] addObserver:self
                                             selector:@selector(upDateSamples:)
                                                 name:@"Gallery"
                                               object:nil];
    
    
}




-(void)upDateTree:(NSNotification *)notification
{
  [evaluationStatus setImage:[self recoverEvaluationFlags:[[SEECUser sharedInstance]FK_activityId]]];
    
    NSLog(@"update the tree notification");
    //try to optimize
    //init pop overs
   [self initNSSW];
    [self initNSOS];
    [self initASDOS];
    [self initNSGP];
    [self initNREDI];
    [self initNMOS];
    [self initBPDOS];
    [self initNAOS];
    [self initNSRC];
}




-(void)upDateSamples:(NSNotification *)notification{
     NSLog(@"update the sample buttons");
     NSString *sample = (NSString *) notification.object;
     NSLog(@" sample %@", sample);
}


- (void)initNSSW{
       SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NSSW" ];
    nssw.manualId= manualID;
    
    //[[SEECUser sharedInstance ]initFK_manualId:manualID];
    
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //pop over
    self.popOverController1 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
  
}



- (void)initNSOS{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NSOS" ];
    nssw.manualId= manualID;
    
   // [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController2 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
    
    
}



- (void)initASDOS{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"AS-DOS" ];
    nssw.manualId= manualID;
   // [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController3 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
   
    
}


- (void)initNSGP{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NSGP" ];
    nssw.manualId= manualID;
   // [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController4 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
    
}


- (void)initNREDI{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NREDI" ];
    nssw.manualId= manualID;
   // [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController5 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
   
}


- (void)initNMOS{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NMOS" ];
    nssw.manualId= manualID;
    //[[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController6 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
    
}


- (void)initBPDOS{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"B&P-DOS" ];
    nssw.manualId= manualID;
   // [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController7 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
    
}


- (void)initNAOS{
    SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NAOS" ];
    nssw.manualId= manualID;
   // [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController8 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];
   
}




- (void)initNSRC{
   SEECViewController *nssw = [[SEECViewController alloc] initWithStyle:UITableViewStylePlain];
    nssw.phaseNum=[[SEECUser sharedInstance]phaseNum];
    NSString *manualID = [self recoverManuaKey: @"NSRC" ];
    nssw.manualId= manualID;
 //   [[SEECUser sharedInstance ]initFK_manualId:manualID];
    UINavigationController *navCtrl = [[UINavigationController alloc] initWithRootViewController:nssw];
    [nssw release];
    //look is other pop over
    self.popOverController9 = [[UIPopoverController alloc] initWithContentViewController:navCtrl];
    [navCtrl release];

}







- (void)viewDidUnload
{
    
    [self setObjetive:nil];
    [self setActivity:nil];
    [self setMethod:nil];
    [self setEvidence:nil];
    [self setSpecialStandard:nil];
    [self setCodeLabel:nil];
    [self setStandardName:nil];
    [self setCertificationLevelImg:nil];
    [self setTypeOfBreachLabel:nil];
    [self setNameOfResponsibleLabel:nil];
    [self setDepartmentLabel:nil];
    [self setPhaseLabel:nil];
    [self setDealerLabel:nil];
    [self setEvidence1but:nil];
    [self setEvidence2but:nil];
    [self setEvidence3but:nil];
    [super viewDidUnload];
    
    // Release any retained subviews of the main view.
}



-(void) viewDidAppear:(BOOL)animated{
    
    //recollect photo files
    [self recollectEvidences];
    
    
}




- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
    return (interfaceOrientation == UIInterfaceOrientationLandscapeRight);
}



















- (IBAction)NSSW:(UIButton *)sender{
    NSString *manualID = [self recoverManuaKey: @"NSSW" ];
     [SEECUser sharedInstance].FK_manualId= manualID;
    
    
    [self.popOverController1  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
    
    
}

- (IBAction)NSOS:(UIButton *)sender{
    
    NSString *manualID = [self recoverManuaKey: @"NSOS" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    
    [self.popOverController2  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
    
}



- (IBAction)ASDOS:(UIButton *)sender{
    
    NSString *manualID = [self recoverManuaKey: @"AS-DOS" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController3  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
}

- (IBAction)NSGP:(UIButton *)sender{
    
    
    NSString *manualID = [self recoverManuaKey: @"NSGP" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController4  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
    
}

- (IBAction)NREDI:(UIButton *)sender{
    
    
    NSString *manualID = [self recoverManuaKey: @"NREDI" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController5  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
}

- (IBAction)NMOS:(UIButton *)sender{
    
    NSString *manualID = [self recoverManuaKey: @"NMOS" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController6  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
}

- (IBAction)BPDOS:(UIButton *)sender{
    
    NSString *manualID = [self recoverManuaKey: @"B&P-DOS" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController7  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
}

- (IBAction)NAOS:(UIButton *)sender{
    
    NSString *manualID = [self recoverManuaKey: @"NAOS" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController8  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
    
}

- (IBAction)NSRC:(UIButton *)sender{
    
    NSString *manualID = [self recoverManuaKey: @"NSRC" ];
    [SEECUser sharedInstance].FK_manualId= manualID;
    [self.popOverController9  presentPopoverFromRect:sender.frame
                                              inView:self.view
                            permittedArrowDirections:UIPopoverArrowDirectionLeft
                                            animated:NO ];
}
















-(NSDictionary *) getDictionary{
    
    
    
    
    NSArray *valuesForNewCapture = [NSArray arrayWithObjects:
                                    [[SEECUser sharedInstance]LK_evaluationId],
                                    [[SEECUser sharedInstance]FK_userId],
                                    [[SEECUser sharedInstance]FK_manualId],
                                    [[SEECUser sharedInstance]FK_standardId],
                                    [[SEECUser sharedInstance]FK_activityId],
                                    [[SEECUser sharedInstance]FK_branchId],
                                    [[SEECUser sharedInstance]FK_departmentId],
                                    [[SEECUser sharedInstance]FK_ownerId],
                                    [[SEECUser sharedInstance]phaseNum],
                                    [[SEECUser sharedInstance]reached],
                                    [[SEECUser sharedInstance]notReached],
                                    [[SEECUser sharedInstance]notApplicable],
                                    [[SEECUser sharedInstance]certificationLevel],
                                    [[SEECUser sharedInstance]commentTitle],
                                    [[SEECUser sharedInstance]comment],
                                    [[SEECUser sharedInstance]recommendation],
                                    [[SEECUser sharedInstance]createdDate],
                                    [[SEECUser sharedInstance]actionPlan],
                                    [[SEECUser sharedInstance]estimatedImpDate],
                                    [[SEECUser sharedInstance]actionPlanDate],
                                    [[SEECUser sharedInstance]actionPlanComment],
                                    [[SEECUser sharedInstance]commentDate],
                                    [[SEECUser sharedInstance]actionPlanApprove],
                                    [[SEECUser sharedInstance]furtherContribution],
                                    [[SEECUser sharedInstance]tracking],
                                    [[SEECUser sharedInstance]specialStandard],
                                    nil];
    
    
    
    
    NSArray *keysForNewCapture = [NSArray arrayWithObjects:
                                  @"lk_evaluationId",
                                  @"fk_userId",
                                  @"fk_manualId",
                                  @"fk_standardId",
                                  @"fk_activityId",
                                  @"fk_branchId",
                                  @"fk_departmentId",
                                  @"fk_ownerId",
                                  @"phaseNum",
                                  @"reached",
                                  @"notReached",
                                  @"notApplicable",
                                  @"certificationLevel",
                                  @"commentTitle",
                                  @"comment",
                                  @"recommendation",
                                  @"createdDate",
                                  @"actionPlan",
                                  @"estimatedImpDate",
                                  @"actionPlanDate",
                                  @"actionPlanComment",
                                  @"commentDate",
                                  @"actionPlanApprove",
                                  @"furtherContribution",
                                  @"tracking",
                                  @"specialStandard",
                                  nil];
    
    
    
    // NSLog(@" %@",valuesForNewCapture);
    // NSLog(@" %@",keysForNewCapture);
    
    
    NSDictionary *dictionaryForNewCapture = [NSDictionary dictionaryWithObjects:valuesForNewCapture
                                                                        forKeys:keysForNewCapture];
    
    return dictionaryForNewCapture;
    
    
}





















-(void)showAlertMsg:(NSString *)msgtext{
    
	NSString *title = @"SEEC iPad";
    
    UIAlertView* alertView = nil;
    
    alertView = [[UIAlertView alloc] initWithTitle:title message:msgtext delegate:self cancelButtonTitle:@"OK" otherButtonTitles:nil];
    
    [alertView show];
    
    [alertView release];
}






//notifications for manual
- (void)manualNotification:(NSNotification *)notification{
    
    //cealn form before display
    [self cleanForm];
  
    [evaluationStatus setImage:[self recoverEvaluationFlags:[[SEECUser sharedInstance]FK_activityId]]];
    
    
    NSLog(@"notifcation manual");
    
    codeLabel.text=[[SEECUser sharedInstance]code];
    standardName.text = [[SEECUser sharedInstance]std];
    TypeOfBreachLabel.text=[[SEECUser sharedInstance]typeOfBreach];
    
    
    ///details of evaluation "standar"
    
    objetive.text=[[SEECUser sharedInstance]obj ];
    activity.text=[[SEECUser sharedInstance]act ];
    method.text=[[SEECUser sharedInstance]mth ];
    evidence.text=[[SEECUser sharedInstance]evid];
    //specialStandard.text=[[SEECUser sharedInstance]specialStandard ];
    
    
    NSPredicate *predic = [NSPredicate predicateWithFormat:@"LK_departmentId == %@", [[SEECUser sharedInstance]FK_departmentId] ];
    
    
    NSDictionary *recoverInfo  =  [self recoverInfo:                                                                @"seec_department" : predic : @"dataroot" : @"seec_department" ];
    
    
    DepartmentLabel.text = [NSString stringWithFormat:@"%@", [recoverInfo valueForKey:@"departmentName"]];
    
    
    
    
    NSLog(@" department id %@", [[SEECUser sharedInstance]FK_departmentId]);
    
    NSLog(@" branch id %@",[[SEECUser sharedInstance]branchId]);
    
    
    
    NSPredicate *predicResponsible = [NSPredicate predicateWithFormat:@"FK_branchId == %@ AND FK_departmentId == %@", [[SEECUser sharedInstance]branchId] ,[[SEECUser sharedInstance]FK_departmentId] ];
    
    
    
    NSDictionary *recoverInfoResp  =  [self recoverInfo:                                                                @"seec_owner" : predicResponsible : @"dataroot" : @"seec_owner" ];
    
    
    //full name
    
    NSString *fnameOwner =[NSString stringWithFormat:@"%@", [recoverInfoResp valueForKey:@"firstName"]];
    
    NSString *lnameOwner =[NSString stringWithFormat:@"%@", [recoverInfoResp valueForKey:@"lastName"]];
    
    
    NameOfResponsibleLabel.text = [[fnameOwner stringByAppendingString:@" "] stringByAppendingString:lnameOwner];
    
    
    [[SEECUser sharedInstance]initFK_ownerId:[NSString stringWithFormat:@"%@", [recoverInfoResp valueForKey:@"LK_ownerId"]]];
    
    //hide pops    
    [self.popOverController1 dismissPopoverAnimated:YES];
    [self.popOverController2 dismissPopoverAnimated:YES];
    [self.popOverController3 dismissPopoverAnimated:YES];
    [self.popOverController4 dismissPopoverAnimated:YES];
    [self.popOverController5 dismissPopoverAnimated:YES];
    [self.popOverController6 dismissPopoverAnimated:YES];
    [self.popOverController7 dismissPopoverAnimated:YES];
    [self.popOverController8 dismissPopoverAnimated:YES];
    [self.popOverController9 dismissPopoverAnimated:YES];
    
    //recollect photo files
    [self recollectEvidences];
    
}




-(void) recollectEvidences{

    //recover evidences
    //NSLog(@" get evideneces %d", [self getSamplesEvidences]);
    
    NSInteger iSamples = [self getSamplesEvidences];
    
    if (iSamples == 0){
        [evidence1but setHidden:YES];
        [evidence2but setHidden:YES];
        [evidence3but setHidden:YES];
        evidenceCount = 0;
        enableCamera = TRUE;
    }
    
    
    if (iSamples == 1){
        [evidence1but setHidden:NO];
        [evidence2but setHidden:YES];
        [evidence3but setHidden:YES];
        evidenceCount =1;
        enableCamera = TRUE;
    }
    
    if (iSamples == 2){
        [evidence1but setHidden:NO];
        [evidence2but setHidden:NO];
        [evidence3but setHidden:YES];
        evidenceCount=2;
        enableCamera = TRUE;
    }
    
    if (iSamples == 3){
        [evidence1but setHidden:NO];
        [evidence2but setHidden:NO];
        [evidence3but setHidden:NO];
        evidenceCount=3;
        enableCamera = FALSE;
    }
    

}


- (IBAction)camera:(UIButton *)sender{
    
    // Throw Camera!
    if(enableCamera && evidenceCount <3){
        [self presentCameraUserInterface];
    }
    
}






#pragma mark - UIImagePickerDelegate

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info
{
    
    ++evidenceCount;    // obtain number of evidences
    
    NSTimeInterval timestampInterval = [[NSDate date] timeIntervalSince1970];
    NSString *imageFilename = [NSString stringWithFormat:@"MDS-%0.0f", timestampInterval];
    
    UIImage *capturedImage = [info objectForKey:UIImagePickerControllerOriginalImage];  // Retrieve Image
    
    [capturedImage saveImageWithFileName:imageFilename]; // Save it with filename using our persistance layer
    
    //UIImageWriteToSavedPhotosAlbum(capturedImage, nil, nil, nil);   //save image in gallery
    
    NSData *imageData = UIImagePNGRepresentation(capturedImage);
    
    NSString *imagefileSize = [NSString stringWithFormat:@"%d", imageData.length];
    
    NSString *evidenceCountNumber = [NSString stringWithFormat:@"%d", evidenceCount];
    
    NSDate *dateNow = [NSDate date];
    
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    [dateFormatter setDateStyle:NSDateFormatterShortStyle];
    
    //label for the user 
    NSString *evidenceFile= [[[[standardName.text stringByAppendingString:@" "] stringByAppendingString:codeLabel.text]stringByAppendingString:@" "] stringByAppendingString:[NSString stringWithFormat:@"%d", evidenceCount]];
    
     NSArray *arrayOfEvidence = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    
    NSArray *keys = @[@"lk_evidenceFileID", @"fk_evaluationID", @"fk_userID", @"fileName", @"evidenceFile", @"contentType", @"fileSize", @"attachDate", @"activefile", @"status",@"phase", @"branchID", @"activityId", @"evaluationId"];
    
    NSString *consecutive = [NSString stringWithFormat:@"%d", [arrayOfEvidence count]+1];
   
    NSArray *objects = @[evidenceCountNumber, consecutive, [[SEECUser sharedInstance]FK_userId], imageFilename, evidenceFile , @"image/png", imagefileSize, [dateFormatter stringFromDate:dateNow], [NSNumber numberWithInt:0], @"0", [[SEECUser sharedInstance]phaseNum],[[SEECUser sharedInstance]FK_branchId], [[SEECUser sharedInstance]FK_activityId],@"0" ];
    
    NSDictionary *currentImageDictionary = [NSDictionary dictionaryWithObjects:objects
                                                                       forKeys:keys];
    //NSLog(@"dictionary %@",currentImageDictionary);
    
    NSMutableArray *allEvidence = [[NSMutableArray alloc] init];
    
   
    
    if (arrayOfEvidence)
    {
        [allEvidence addObjectsFromArray:arrayOfEvidence];
    }
    
    [allEvidence addObject:currentImageDictionary];
    
    [allEvidence saveArrayWithFileName:@"seec_evidenceFile.json"];
    
    NSLog( @" name of the image from camera   %@", imageFilename);
    
    //recover the control
    [picker dismissModalViewControllerAnimated:YES];
    
    if (evidenceCount > 0)  // at least one pic has been takne
    {
        //[evidence1but setHidden:NO];
    }
    else if (evidenceCount > 3) // 3 pics have been taken
    {
        [self showAlertMsg:@"Solo 3 fotos por evidencia"];
    }
    else                        // no pics have been taken
    {
       // [evidence1but setHidden:YES];
    }
    
     [self recollectEvidences];
    
}


- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    
    NSLog(@" cancel image");
    
    
    //recover the control
    [picker dismissModalViewControllerAnimated:YES];
    
}








-(NSDictionary *) recoverInfo: (NSString *)    fileJson
                             : (NSPredicate *) predicate
                             : (NSString *)    dataRoot
                             : (NSString *) setValue{
    
    NSURL *url = [[NSBundle mainBundle] URLForResource:fileJson withExtension:@"json"];
    
    NSData *data = [NSData dataWithContentsOfURL:url];
    
    NSError *error = nil;
    
    NSDictionary *response = AFJSONDecode(data, &error);
    
    
    NSArray *items =[[[response valueForKey:dataRoot] valueForKey:setValue] filteredArrayUsingPredicate:predicate];
    
    
    NSDictionary *currentObject = [ items objectAtIndex:0];
    
    
    return currentObject;
    
}











-(void) logEvaluation{
    
    NSLog(@" ====================================================");
    NSLog(@" LK_evaluationId =  %@",  [[SEECUser sharedInstance]LK_evaluationId]);
    NSLog(@" FK_userId  = %@",    [[SEECUser sharedInstance]FK_userId]);
    NSLog(@" FK_manualId = %@",    [[SEECUser sharedInstance]FK_manualId]);
    NSLog(@" FK_standardId = %@",   [[SEECUser sharedInstance]FK_standardId]);
    NSLog(@" FK_activityId = %@",   [[SEECUser sharedInstance]FK_activityId]);
    NSLog(@" FK_branchId = %@",  [[SEECUser sharedInstance]FK_branchId]);
    NSLog(@" FK_departmentId = %@",  [[SEECUser sharedInstance]FK_departmentId]);
    NSLog(@" FK_ownerId = %@",  [[SEECUser sharedInstance]FK_ownerId]);
    NSLog(@" phaseNum = %@",  [[SEECUser sharedInstance]phaseNum]);
    NSLog(@" reached = %@",  [[SEECUser sharedInstance]reached]);
    NSLog(@" notReached = %@", [[SEECUser sharedInstance]notReached]);
    NSLog(@" notApplicable = %@", [[SEECUser sharedInstance]notApplicable]);
    NSLog(@" certificationLevel = %@", [[SEECUser sharedInstance]certificationLevel]);
    NSLog(@" commentTitle = %@", [[SEECUser sharedInstance]commentTitle]);
    NSLog(@" comment = %@", [[SEECUser sharedInstance]comment]);
    NSLog(@" recommendation - %@", [[SEECUser sharedInstance]recommendation]);
    NSLog(@" createdDate = %@", [[SEECUser sharedInstance]createdDate]);
    NSLog(@" actionPlan - %@", [[SEECUser sharedInstance]actionPlan]);
    NSLog(@" estimatedImpDate - %@", [[SEECUser sharedInstance]estimatedImpDate]);
    NSLog(@" actionPlanDate - %@", [[SEECUser sharedInstance]actionPlanDate]);
    NSLog(@" actionPlanComment - %@", [[SEECUser sharedInstance]actionPlanComment]);
    NSLog(@" commentDate - %@", [[SEECUser sharedInstance]commentDate]);
    NSLog(@" actionPlanApprove - %@", [[SEECUser sharedInstance]actionPlanApprove]);
    NSLog(@" furtherContribution - %@", [[SEECUser sharedInstance]furtherContribution]);
    NSLog(@" tracking  - %@", [[SEECUser sharedInstance]tracking]);
    NSLog(@" specialStandard = %@", [[SEECUser sharedInstance]specialStandard]);
    NSLog(@" ====================================================");
    
}



-(void)cleanVariables{
    
    [[SEECUser sharedInstance]initFK_activityId:@""];
    [[SEECUser sharedInstance]initcomment:@""];
    [[SEECUser sharedInstance]initcommentTitle:@""];
    
    [[SEECUser sharedInstance]initreached:@""];
    [[SEECUser sharedInstance]initnotReached:@""];
    [[SEECUser sharedInstance]initnotApplicable:@""];
    
}



-(void) cleanForm{
    
    
    objetive.text=@"";
    activity.text=@"";
    method.text=@"";
    evidence.text=@"";
    specialStandard.text=@"";
    codeLabel.text=@"";
    standardName.text=@"";
    TypeOfBreachLabel.text=@"";
    DepartmentLabel.text=@"";
    NameOfResponsibleLabel.text=@"";
    
    
}



-(NSString *) recoverManuaKey: (NSString * )manualGuid {
    
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_manual" withExtension:@"json"];
    
    NSData *manuals = [NSData dataWithContentsOfURL:url];
    
    NSError *error = nil;
    
    NSDictionary *response = AFJSONDecode(manuals, &error);
    
    
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"phaseNum == %@ AND manualGuid == %@", [[SEECUser sharedInstance]phaseNum],manualGuid  ];

    
    NSArray *filtered =[[[response valueForKey:@"dataroot"] valueForKey:@"seec_manual"] filteredArrayUsingPredicate:predicate];
    
    NSDictionary *currenDictionary = [ filtered objectAtIndex:0];
        
    NSString *mid = [NSString stringWithFormat:@"%@", [currenDictionary valueForKey:@"LK_manualId"]];
    
    NSLog(@" recover manual id %@", mid);
    
   return mid;
    
}


/// floating display of evaluation

- (IBAction)applyEvaluation:(id)sender {
    if([[[SEECUser sharedInstance]FK_activityId ]isEqualToString:@""]){
        
        [self showAlertMsg:@"necesitas selecionar una actividad"];
        enableCamera = FALSE;
        
    }else{
        
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
        SEECApplyEvaluationViewController *applyEva = [storyboard instantiateViewControllerWithIdentifier:@"SEECApplyEvaluation"];
        
        [self presentModalViewController:applyEva animated:NO];
        
        NSLog(@"applyEvaluation");
        
       
    }
}




//to open gallery of one evidence

- (IBAction)evidence1Action:(UIButton *)sender{
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SEECImageCollectorViewController *applyImgs = [storyboard instantiateViewControllerWithIdentifier:@"SEECImages"];
    
    
    
    [self presentModalViewController:applyImgs animated:NO];
    
    NSLog(@"applyEvaluation");
    
    
}



- (IBAction)evidence2Action:(UIButton *)sender{
    

    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SEECImageCollectorViewController *applyImgs = [storyboard instantiateViewControllerWithIdentifier:@"SEECImages"];
    
    
    
    [self presentModalViewController:applyImgs animated:NO];
    
    
}



- (IBAction)evidence3Action:(UIButton *)sender{
    
    
    UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"Main" bundle:nil];
    SEECImageCollectorViewController *applyImgs = [storyboard instantiateViewControllerWithIdentifier:@"SEECImages"];
    
    
    
    [self presentModalViewController:applyImgs animated:NO];
    

}







- (void)dealloc {
    [codeLabel release];
    [standardName release];
    [certificationLevelImg release];
    [TypeOfBreachLabel release];
    [NameOfResponsibleLabel release];
    [DepartmentLabel release];
    [PhaseLabel release];
    [DealerLabel release];
    [evidence1but release];
    [evidence2but release];
    [evidence3but release];
    [super dealloc];
}

#pragma mark - Gallery Image

-(void)photoGallery:(FGalleryViewController *)gallery clickedPhotoAtIndex:(NSUInteger)index
{
    NSLog(@"Indice %d", index);
    
    
    
    [self.navigationController popViewControllerAnimated:YES];
    
    UIImage *image = [UIImage imageWithContentsOfFile:[self.photoGalleryForEvaluation.allPhotos objectAtIndex:index]];
    
    [self postImage: image
           withName:@"Filename"
               user:[[SEECUser sharedInstance]LK_evaluationId]
       evaluationID:[[SEECUser sharedInstance]FK_userId]];
    
}




-(NSInteger )getSamplesEvidences{
    
    //get all samples
    NSArray *allEvidence = [NSArray arrayFromFileName:@"seec_evidenceFile.json"];
    
    //set log samples
    //NSLog(@"array of evideneces %@", allEvidence);
    
    //create a query
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@" branchID == %@ AND phase == %@   AND activityId == %@",[[SEECUser sharedInstance]branchId], [[SEECUser sharedInstance]phaseNum], [[SEECUser sharedInstance]FK_activityId]];
    
    //filtering
    NSArray *samples = [allEvidence filteredArrayUsingPredicate:predicate];
    
    //filtres to log
    //NSLog(@"array of samples %@", samples);
    
    //prepare to string
    NSMutableArray *mutableArray = [samples mutableCopy];
    
    //return mutable
    return [mutableArray count];
}





- (UIImage *) recoverEvaluationFlags: (NSString *) activityId {
    
    
    
    // Load previous array of captures
    NSData *previousEvaluationData = [NSData dataFromFileName:jsonFileName3];
    
    //NSLog(@" response of data %@", previousEvaluationData);
    
    if (previousEvaluationData!=nil) {
        
        
        NSError *error = nil;
        
        
        NSArray *response = AFJSONDecode(previousEvaluationData, &error);
        
        
        NSPredicate *predicate = [NSPredicate predicateWithFormat:@" fK_branchId == %@ AND fK_activityId ==%@ AND  phaseNum ==%@", [[SEECUser sharedInstance]FK_branchId], activityId , [[SEECUser sharedInstance]phaseNum] ];
        
        
        
        
        NSArray *leads = [response filteredArrayUsingPredicate:predicate];
        
        
        
        NSLog(@"Filtred response:  fk_branchId AND fk_activityId AND phaseNum  ----------  : %@", leads);
        
        
        
        
        if( [leads count] > 0 ){
            
            currentObjectEvaluation = [ leads objectAtIndex:0];
            
            NSString *notReached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notReached"]];
            
            NSString *notApp = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"notApplicable"]];
            
            NSString *reached = [NSString stringWithFormat:@"%@", [currentObjectEvaluation valueForKey:@"reached"]];
            
            
            
            NSLog(@" notReached  %@", notReached);
            
            NSLog(@" notApp  %@", notApp);
            
            NSLog(@" reached  %@", reached);
            
            
            
            if( [notReached isEqualToString:@"1"] &&
               [reached isEqualToString:@"0"]){
                return [UIImage imageNamed: @"noReached.png"];
            }
            
            //json issue arrived  notApp <null>
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"0"]) {
                return [UIImage imageNamed: @"notApplied.png"];
            }
            
            
            if([notReached isEqualToString:@"0"]  &&
               [reached isEqualToString:@"1"]){
                return [UIImage imageNamed: @"applied.png"];
            }
            
            
            
            
            
        }else{
            
            
        }
        
        
        
    }//first time if
    
    return [UIImage imageNamed: @"noEvaluation.png"];
}




@end