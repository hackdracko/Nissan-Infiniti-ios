/*
 
 Product is designed by MINDBITS,  trade mark registered in Mexico.
 
 
 For tecnical support:
 
 www.mindbits.com.mx
 info@mindbits.com.mx
 ventas@mindbits.com.mx
 
 All right reserved, Do not edit this file!.
 sotware product delivered and tested under standards  by pwc mexico.
 
 Warning: this product is writting in production enviroment.
 
 This is a copy of original software, administered  by an third part,  so this software its License is distributed on an "AS IS",  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. the trade mark MINDBITS is not resposable for errors or mistakes in PWC / NISSAN production enviroments. Open Sources libraries show its own conditions of distributions.
 
 */ 


#import "SEECSucursalesTableViewController.h"
#import "AFJSONUtilities.h"
#import "SEECReportesViewController.h"
#import "SEECLoginViewController.h"
#import "SEECUser.h"




@interface SEECSucursalesTableViewController ()

@end






NSDictionary *currentObject;
NSArray *selectedCities;


@implementation SEECSucursalesTableViewController




- (id)initWithStyle:(UITableViewStyle)style
{
    self = [super initWithStyle:style];
    self.title = @"Distribuidor";
    self.contentSizeForViewInPopover = CGSizeMake(450.0, 600.0);
    if (self) {
        // Custom initialization
    }
    return self;
}




- (void)viewDidLoad
{
    NSURL *url = [[NSBundle mainBundle] URLForResource:@"seec_branch" withExtension:@"json"];
    NSData *cities = [NSData dataWithContentsOfURL:url];
    
    NSError *error = nil;
    
    NSDictionary *response = AFJSONDecode(cities, &error);
    
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"FK_stateId == %@ AND FK_cityId == %@", self.stateId, self.cityId];
    
    //global var
    selectedCities =[[[response valueForKey:@"dataroot"] valueForKey:@"seec_branch"] filteredArrayUsingPredicate:predicate];
    
   // NSLog(@"Selected Branches: %@", selectedCities);
    
    _allBranches = [[NSMutableArray alloc] initWithArray:selectedCities];

    
    
    
    [super viewDidLoad];

    // Uncomment the following line to preserve selection between presentations.
    // self.clesarsSelectionOnViewWillAppear = NO;
 
    // Uncomment the following line to display an Edit button in the navigation bar for this view controller.
    // self.navigationItem.rightBarButtonItem = self.editButtonItem;
}

- (void)viewDidUnload
{
    [super viewDidUnload];
    // Release any retained subviews of the main view.
    // e.g. self.myOutlet = nil;
}

- (BOOL)shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)interfaceOrientation
{
	return (interfaceOrientation == UIInterfaceOrientationLandscapeRight);
}

#pragma mark - Table view data source

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
    // Return the number of sections.
    return 1;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
    
    
    // Return the number of rows in the section.
    return [self.allBranches count];
    
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    static NSString *CellIdentifier = @"Cell";
    UITableViewCell *cell = [tableView dequeueReusableCellWithIdentifier:CellIdentifier];
    
    if (cell == nil)
    {
        cell = [[UITableViewCell alloc] initWithStyle:UITableViewCellStyleDefault reuseIdentifier:CellIdentifier];
        
    }
    
    //NSDictionary *currentObject = [self.allBranches objectAtIndex:indexPath.row];
    
     
    //now current object is global variable @havo
    currentObject = [self.allBranches objectAtIndex:indexPath.row];
    
    cell.textLabel.text = [NSString stringWithFormat:@"%@", [currentObject valueForKey:@"branchName"]];
    
    //NSLog(@"botonazo de sucursal");
    
        
    return cell;
}




#pragma mark - Table view delegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    
    NSLog(@"setting values to singlenton");
    
    //updating current object with index
    currentObject = [ self.allBranches objectAtIndex:indexPath.row];
    
    //-------------------------
    
    //global setting
    [[SEECUser sharedInstance]initBranchId:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"LK_branchId"]]];
    
          
    [[SEECUser sharedInstance]initPhone:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"phone"]]];
    
    
    [[SEECUser sharedInstance]initAdress:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"adress"]]];
    
    
    [[SEECUser sharedInstance]initbName:[NSString stringWithFormat:@"%@", [currentObject valueForKey:@"branchName"]]];
    
    
    //----
    
    //recover
    NSString *bname = [NSString stringWithFormat:@"%@", [currentObject valueForKey:@"branchName"]];
    

    
    NSString *isvNumber= [NSString stringWithFormat:@"%@", [currentObject valueForKey:@"isvNumber"]];

    NSString *saleType= [NSString stringWithFormat:@"%@", [currentObject valueForKey:@"saleType"]];
 
    NSString *FK_zoneId= [NSString stringWithFormat:@"%@", [currentObject valueForKey:@"FK_zoneId"]];
    
    //----
    
    NSArray *branchKeys = [NSArray arrayWithObjects:@"isvNumber", @"saleType", @"FK_zoneId", @"branchName", nil];
    
    
    NSArray *branchObjects = [NSArray arrayWithObjects:isvNumber, saleType, FK_zoneId, bname, nil];
    
    NSDictionary *branchDictionary = [NSDictionary dictionaryWithObjects:branchObjects
                                                                 forKeys:branchKeys];
    
    
    [[NSNotificationCenter defaultCenter] postNotificationName:@"SelectBranch" object:branchDictionary];
   
}




-(void)dealloc
{
    [_allBranches release];
    [_stateId release];
    [_cityId release];
    [super dealloc];
}

@end
